[runtime]
; The emcee sampler, which uses the Goodman & Weare algorithm.
sampler = emcee

[emcee]
; The emcee sampler uses the concept of walkers, a collection of live
; points.  Sampling is done along lines that connect pairs of walkers.
; The number of walkers must be at least 2*nparam + 1, but in general more
; than that usually works better.
walkers = 64
; This many samples is overkill, just to make the plots look a lot nicer.
samples = 400
; This is the interval at which convergence diagnostics are performed.
nsteps = 10

;start_points = start.txt

[grid]
nsample_dimension=30

[test]
save_dir = pan1

[output]
filename = pantheon.txt
format = text
verbosity= debug

[pipeline]
; We use two likelihoods, the JLA (for high redshift) and Riess 2011 to
; anchor H0, which is otherwise degenerate with the nuisance parameter M.
modules = consistency camb pantheon
; riess16
values = cosmosis/dev/pantheon_values.ini
extra_output =
likelihoods = pantheon
;riess16
quiet=T
debug=F
timing=F


; To use the maxlike sampler instead you can set sampler=maxlike at the
; top.
[maxlike]
; The values file we use in this example was created just like the one we
; made in demo4, by setting sampler = maxlike above, so that these
; settings were used:
output_ini = demos/values5a.ini
; A covariance can only be output by some optimization methods (those that
; find an approximation to it numerically).
output_covmat = new.cov
tolerance = 1e-6
max_posterior = F

; The BFGS method seems to find it a bit harder to actually locate the
; peak, but once it's there it provides you with covariance matrix
; estimate.
;method = Nelder-Mead
;method = BFGS

; Any minimizer available in scipy can be specified here - they are:
; Nelder-Mead
; Powell
; CG
; BFGS
; Newton-CG
; L-BFGS-B
; TNC
; COBYLA
; SLSQP
; dogleg
; trust-ncg



[camb]
; For background-only data we do not need a full Boltzmann evaluation,
; just D(z), etc.  Setting mode=background means we get this.
file = cosmosis-standard-library/boltzmann/camb/camb.so
mode=background
feedback=0

[pantheon]
; JLA needs quite a lot of parameters telling it where data files are ...
file = cosmosis-standard-library/likelihood/pantheon/pantheon.py

; This avoids saving various other derived parameters, like the theory vector and
; the covariance matrix. These things can be useful in some contexts but for very
; fast likelihoods can also be the limiting speed factor
likelihood_only = F



; The Riess 16 likelihood anchors H0 for us.
[riess16]
file = cosmosis-standard-library/likelihood/riess16/riess16.py

; The consistency module translates between our chosen parameterization
; and any other that modules in the pipeline may want (e.g. camb).
[consistency]
file = cosmosis-standard-library/utility/consistency/consistency_interface.py
