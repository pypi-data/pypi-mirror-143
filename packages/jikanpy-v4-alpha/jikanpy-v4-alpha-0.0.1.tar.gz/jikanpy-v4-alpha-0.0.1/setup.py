# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['jikan_api_client',
 'jikan_api_client.api',
 'jikan_api_client.api.anime',
 'jikan_api_client.api.characters',
 'jikan_api_client.api.clubs',
 'jikan_api_client.api.genres',
 'jikan_api_client.api.magazines',
 'jikan_api_client.api.manga',
 'jikan_api_client.api.people',
 'jikan_api_client.api.producers',
 'jikan_api_client.api.random',
 'jikan_api_client.api.recommendations',
 'jikan_api_client.api.reviews',
 'jikan_api_client.api.schedules',
 'jikan_api_client.api.seasons',
 'jikan_api_client.api.top',
 'jikan_api_client.api.users',
 'jikan_api_client.api.watch',
 'jikan_api_client.models',
 'jikanpy']

package_data = \
{'': ['*']}

install_requires = \
['attrs>=21.3.0', 'httpx>=0.15.4,<0.23.0', 'python-dateutil>=2.8.0,<3.0.0']

extras_require = \
{'testing': ['black>=20.8b1', 'mypy>=0.782', 'pytest>=5.4.2', 'flake8>=4.0.0']}

setup_kwargs = {
    'name': 'jikanpy-v4-alpha',
    'version': '0.0.1',
    'description': 'A client library for accessing Jikan API',
    'long_description': '# jikan-api-client\n\nNOTE: Docs are partly autogenerated -- this is all placeholder for now\n\nA client library for accessing Jikan API\n\n## Usage\n\nFirst, create a client:\n\n```python\nfrom jikan_api_client import Client\n\nclient = Client(base_url="https://api.example.com")\n```\n\nNow call your endpoint and use your models:\n\n```python\nfrom jikan_api_client.models import MyDataModel\nfrom jikan_api_client.api.my_tag import get_my_data_model\nfrom jikan_api_client.types import Response\n\nmy_data: MyDataModel = get_my_data_model.sync(client=client)\n# or if you need more info (e.g. status_code)\nresponse: Response[MyDataModel] = get_my_data_model.sync_detailed(client=client)\n```\n\nOr do the same thing with an async version:\n\n```python\nfrom jikan_api_client.models import MyDataModel\nfrom jikan_api_client.api.my_tag import get_my_data_model\nfrom jikan_api_client.types import Response\n\nmy_data: MyDataModel = await get_my_data_model.asyncio(client=client)\nresponse: Response[MyDataModel] = await get_my_data_model.asyncio_detailed(client=client)\n```\n\nThings to know:\n\n1. Every path/method combo becomes a Python module with four functions:\n\n   1. `sync`: Blocking request that returns parsed data (if successful) or `None`\n   1. `sync_detailed`: Blocking request that always returns a `Request`, optionally with `parsed` set if the request was successful.\n   1. `asyncio`: Like `sync` but the async instead of blocking\n   1. `asyncio_detailed`: Like `sync_detailed` by async instead of blocking\n\n1. All path/query params, and bodies become method arguments.\n1. Any endpoint which did not have a tag will be in `jikan_api_client.api.default`\n\n## Building / publishing this Client\n\nThis project uses [Poetry](https://python-poetry.org/) to manage dependencies and packaging. Here are the basics:\n\n1. Update the metadata in pyproject.toml (e.g. authors, version)\n1. If you\'re using a private repository, configure it with Poetry\n   1. `poetry config repositories.<your-repository-name> <url-to-your-repository>`\n   1. `poetry config http-basic.<your-repository-name> <username> <password>`\n1. Publish the client with `poetry publish --build -r <your-repository-name>` or, if for public PyPI, just `poetry publish --build`\n\nIf you want to install this client into another project without publishing it (e.g. for development) then:\n\n1. If that project **is using Poetry**, you can simply do `poetry add <path-to-this-client>` from that project\n1. If that project is not using Poetry:\n   1. Build a wheel with `poetry build -f wheel`\n   1. Install that wheel from the other project `pip install <path-to-wheel>`\n',
    'author': None,
    'author_email': None,
    'maintainer': None,
    'maintainer_email': None,
    'url': None,
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'extras_require': extras_require,
    'python_requires': '>=3.7,<4.0',
}


setup(**setup_kwargs)
