{"version":3,"sources":["style.module.scss","SendGeometry.tsx","index.tsx"],"names":["module","exports","SendGeometry","props","render","labels","args","className","styles","poButton","onClick","_onClicked","disabled","onFocus","_onFocus","onBlur","_onBlur","style","margin","src","process","alt","window","parent","chrome","webview","console","log","msgObject","action","data","uniqueId","options","json","JSON","stringify","postMessage","setState","prevState","Streamlit","setComponentValue","state","isFocused","initialState","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"gIACAA,EAAOC,QAAU,CAAC,SAAW,0B,4KCgCvBC,E,kDAEJ,WAAmBC,GAAwB,IAAD,uBACxC,cAAMA,IAoBDC,OAAS,WACd,IAAIC,EAAiB,CACnB,aAAgB,gBAChB,cAAiB,iBACjB,aAAgB,gBAChB,YAAe,eACf,qBAAwB,0BAO1B,OACE,8BACI,EAAKF,MAAMG,KAAX,UAA6BD,GAC/B,4BACEE,UAAWC,IAAOC,SAClBC,QAAS,EAAKC,WACdC,SAAU,EAAKT,MAAMS,SACrBC,QAAS,EAAKC,SACdC,OAAQ,EAAKC,SAEb,8BACE,yBAAKC,MAfI,CACfC,OAAQ,mBAcoBC,IAAKC,wBAAiDC,IAAI,UAEhFhB,EAAO,EAAKF,MAAMG,KAAX,WA/CyB,EAsDlCK,WAAa,WACnB,GAAmC,oBAAxBW,OAAOC,OAAOC,OAAuB,CAC9C,GAA2C,oBAAhCF,OAAOC,OAAOC,OAAOC,QAG9B,YADAC,QAAQC,IAAI,2CAId,IAAIC,EAAY,CACdC,OAAQ,EAAK1B,MAAMG,KAAX,OACRwB,KAAM,EAAK3B,MAAMG,KAAX,KACNyB,SAAU,EAAK5B,MAAMG,KAAX,SACV0B,QAAS,EAAK7B,MAAMG,KAAX,SAEP2B,EAAOC,KAAKC,UAAUP,GAC1BN,OAAOC,OAAOC,OAAOC,QAAQW,YAAYH,GAEzC,EAAKI,UACH,SAACC,GAAD,mBAAC,eACIA,GADL,IAEET,OAAQD,EAAUC,OAClBC,KAAMF,EAAUE,KAChBC,SAAUH,EAAUG,SACpBC,QAASJ,EAAUI,aAErB,kBAAMO,IAAUC,kBAAkB,EAAKC,MAAMZ,WAE/CH,QAAQC,IAAI,+CAIZD,QAAQC,IAAI,2CArF0B,EAyFlCb,SAAW,WACjB,EAAKuB,SAAS,CAAEK,WAAW,KA1Fa,EA6FlC1B,QAAU,WAChB,EAAKqB,SAAS,CAAEK,WAAW,KA1F3B,IAKMC,EAAe,CACnBd,OANa,EAAK1B,MAAMG,KAAX,OAObwB,KANW,EAAK3B,MAAMG,KAAX,KAOXyB,SANe,EAAK5B,MAAMG,KAAX,SAOf0B,QANc,EAAK7B,MAAMG,KAAX,SAPwB,OAgBxC,EAAKmC,MAAL,eACKE,GAjBmC,E,uBAFjBC,KAoGZC,cAAwB3C,GCjIvC4C,IAAS1C,OACP,kBAAC,IAAM2C,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.d71aa30a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"poButton\":\"style_poButton__3x8Ka\"};","import {\n  ComponentProps,\n  withStreamlitConnection,\n  StreamlitComponentBase,\n  Streamlit,\n} from 'streamlit-component-lib'\nimport React, { ReactNode } from 'react'\n\nimport styles from './style.module.scss';\n\ninterface Options {\n  layer: string\n  units: string\n}\n\ninterface State {\n  action: string\n  data: string\n  uniqueId: string\n  options: Options\n  isFocused: boolean\n}\n\ninterface Labels {\n  [key: string]: string;\n}\n\ndeclare global {\n  interface Window {\n    chrome: any;\n  }\n}\n\nclass SendGeometry extends StreamlitComponentBase<State> {\n\n  public constructor(props: ComponentProps) {\n    super(props)\n\n    // Values from user input\n    const action = this.props.args['action'] as string\n    const data = this.props.args['data'] as string\n    const uniqueId = this.props.args['uniqueId'] as string\n    const options = this.props.args['options'] as Options\n\n    const initialState = {\n      action: action,\n      data: data,\n      uniqueId: uniqueId,\n      options: options\n    } as State\n\n    this.state = {\n      ...initialState\n    }\n  }\n\n  public render = (): ReactNode => {\n    let labels: Labels = {\n      'BakeGeometry': 'Bake Geometry',\n      'ClearGeometry': 'Clear Geometry',\n      'DrawGeometry': 'Draw Geometry',\n      'DisableDraw': 'Disable Draw',\n      'BakePollinationModel': 'Bake Pollination Model'\n    }\n\n    const imgStyle = {\n      margin: '0px 3px 2px 0px'\n    }\n\n    return (\n      <span>\n        { this.props.args['action'] in labels && (\n        <button\n          className={styles.poButton}\n          onClick={this._onClicked}\n          disabled={this.props.disabled}\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}\n        >\n          <span>\n            <img style={imgStyle} src={process.env.PUBLIC_URL + '/img/pollination.png'} alt='logo' />\n          </span>\n          { labels[this.props.args['action']] }\n        </button>\n        )}\n      </span>\n    )\n  }\n\n  private _onClicked = (): void => {\n    if (typeof window.parent.chrome != 'undefined') {\n      if (typeof window.parent.chrome.webview == 'undefined')\n      {\n        console.log('[POLLINATION-DEBUG]: webview not found.');\n        return;\n      }\n      \n      var msgObject = {\n        action: this.props.args['action'],\n        data: this.props.args['data'],\n        uniqueId: this.props.args['uniqueId'],\n        options: this.props.args['options']\n      };\n      var json = JSON.stringify(msgObject);\n      window.parent.chrome.webview.postMessage(json);\n\n      this.setState(\n        (prevState) => ({ \n          ...prevState, \n          action: msgObject.action,\n          data: msgObject.data,\n          uniqueId: msgObject.uniqueId,\n          options: msgObject.options\n        }),\n        () => Streamlit.setComponentValue(this.state.action)\n      );\n      console.log('[POLLINATION-DEBUG]: JSON string sent.');\n    }\n    else\n    {\n      console.log('[POLLINATION-DEBUG]: chrome not found.');\n    }\n  }\n\n  private _onFocus = (): void => {\n    this.setState({ isFocused: true })\n  }\n\n  private _onBlur = (): void => {\n    this.setState({ isFocused: false })\n  }\n}\n\nexport default withStreamlitConnection(SendGeometry)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport SendGeometry from \"./SendGeometry\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <SendGeometry />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}