{"version":3,"sources":["index.tsx"],"names":["map","Streamlit","events","addEventListener","RENDER_EVENT","event","data","detail","fig","args","height","width","debouncedUpdateComponentValue","debounce","updateComponentValue","global_data","__GLOBAL_DATA__","bounds","getBounds","zoom","getZoom","setComponentValue","last_clicked","lat_lng_clicked","last_object_clicked","all_drawings","last_active_drawing","onLayerClick","e","latlng","layer","toGeoJSON","details","drawnItems","features","map_div","document","getElementById","map_div2","style","indexOf","a","createElement","href","id","innerHTML","body","appendChild","render_script","replaced","key","on","_layers","setFrameHeight","setComponentReady"],"mappings":"oHAAA,yBAGIA,EAAW,KAqIfC,IAAUC,OAAOC,iBAAiBF,IAAUG,cAjH5C,SAAkBC,GAEhB,IAAMC,EAAQD,EAAkCE,OAG1CC,EAAcF,EAAKG,KAAL,IACdC,EAAiBJ,EAAKG,KAAL,OACjBE,EAAgBL,EAAKG,KAAL,MAQlBG,EAAgCC,YAASC,EAAsB,KAEnE,SAASA,IACP,IAAMC,EAAcC,gBAChBhB,EAAMe,EAAYf,IAClBiB,EAASjB,EAAIkB,YACbC,EAAOnB,EAAIoB,UACfnB,IAAUoB,kBAAkB,CAC1BC,aAAcP,EAAYQ,gBAC1BC,oBAAqBT,EAAYS,oBACjCC,aAAcV,EAAYU,aAC1BC,oBAAqBX,EAAYW,oBACjCT,OAAQA,EACRE,KAAMA,IAYV,SAASQ,EAAaC,GACpB,IAAMb,EAAcC,gBACpBD,EAAYS,oBAAsBI,EAAEC,OAChCD,EAAEE,OAASF,EAAEE,MAAMC,YACrBhB,EAAYW,oBAAsBE,EAAEE,MAAMC,aAE5C,IAAIC,EAAsBjB,EAAYkB,WAAWF,YAAYG,SAC7DnB,EAAYU,aAAeO,EAC3BpB,IAGF,GAAW,MAAPZ,EACF,IACEA,EAAMgB,gBAAgBhB,IACtB,MAAO4B,GAGP,IAAMO,EAAUC,SAASC,eAAe,WAClCC,EAAWF,SAASC,eAAe,YAKzC,GAJIC,IACFA,EAASC,MAAM7B,OAAf,UAA2BA,EAA3B,MACA4B,EAASC,MAAM5B,MAAf,UAA0BA,EAA1B,OAEEwB,EAAS,CAIX,GAHAA,EAAQI,MAAM7B,OAAd,UAA0BA,EAA1B,MACAyB,EAAQI,MAAM5B,MAAd,UAAyBA,EAAzB,OAE0D,IAAtDH,EAAIgC,QAAQ,qCAA6C,CAC3D,IAAIC,EAAIL,SAASM,cAAc,KAC/BD,EAAEE,KAAO,IACTF,EAAEG,GAAK,SACPH,EAAEI,UAAY,SACdT,SAASU,KAAKC,YAAYN,GAG5B,IAAMO,EAAgBZ,SAASM,cAAc,UAezCO,EAAWzC,EAXI,6UAYnBwC,EAAcH,UAAYI,EAC1Bb,SAASU,KAAKC,YAAYC,GAE1B,IACIhD,EADgBgB,gBACEhB,IAItB,IAAK,IAAIkD,KAFTlD,EAAImD,GAAG,SAxFb,SAAoBvB,GACEZ,gBACRO,gBAAkBK,EAAEC,OAChCjB,OAsFIZ,EAAImD,GAAG,WAlEb,SAAmBvB,GACjBhB,OAkEoBZ,EAAIoD,QAAS,CACfpD,EAAIoD,QAAQF,GAClBC,GAAG,QAASxB,GAEpB3B,EAAImD,GAAG,gBAnEb,SAAgBvB,GACd,OAAOD,EAAaC,MAoEhB3B,IAAUoD,iBACVvC,SAWRb,IAAUqD,oBAIVrD,IAAUoD,mB","file":"static/js/main.d5b8755b.chunk.js","sourcesContent":["import { Streamlit, RenderData } from \"streamlit-component-lib\"\nimport { debounce } from \"underscore\";\n\nlet map: any = null;\n\ntype GlobalData = {\n  map: any;\n  lat_lng_clicked: any;\n  last_object_clicked: any;\n  last_active_drawing: any,\n  all_drawings: any,\n  bounds: any;\n  zoom: any;\n  drawnItems: any;\n};\n\ndeclare var __GLOBAL_DATA__: GlobalData;\n\n/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */\nfunction onRender(event: Event): void {\n  // Get the RenderData from the event\n  const data = (event as CustomEvent<RenderData>).detail\n\n  //console.log(data.args)\n  const fig: string = data.args[\"fig\"];\n  const height: number = data.args[\"height\"];\n  const width: number = data.args[\"width\"];\n\n  function onMapClick(e: any) {\n    const global_data = __GLOBAL_DATA__;\n    global_data.lat_lng_clicked = e.latlng;\n    debouncedUpdateComponentValue()\n  }\n\n  let debouncedUpdateComponentValue = debounce(updateComponentValue, 250)\n\n  function updateComponentValue() {\n    const global_data = __GLOBAL_DATA__;\n    let map = global_data.map;\n    let bounds = map.getBounds();\n    let zoom = map.getZoom();\n    Streamlit.setComponentValue({\n      last_clicked: global_data.lat_lng_clicked,\n      last_object_clicked: global_data.last_object_clicked,\n      all_drawings: global_data.all_drawings,\n      last_active_drawing: global_data.last_active_drawing,\n      bounds: bounds,\n      zoom: zoom,\n    })\n  }\n\n  function onMapMove(e: any) {\n    debouncedUpdateComponentValue()\n  }\n\n  function onDraw(e: any) {\n    return onLayerClick(e);\n  }\n\n  function onLayerClick(e: any) {\n    const global_data = __GLOBAL_DATA__;\n    global_data.last_object_clicked = e.latlng;\n    if (e.layer && e.layer.toGeoJSON) {\n      global_data.last_active_drawing = e.layer.toGeoJSON();\n    }\n    let details: Array<any> = global_data.drawnItems.toGeoJSON().features;\n    global_data.all_drawings = details;\n    debouncedUpdateComponentValue()\n  }\n\n  if (map == null) {\n    try {\n      map = __GLOBAL_DATA__.map;\n    } catch (e) {\n      // Only run this if the map hasn't already been created (and thus the global\n      //data hasn't been initialized)\n      const map_div = document.getElementById(\"map_div\");\n      const map_div2 = document.getElementById(\"map_div2\");\n      if (map_div2) {\n        map_div2.style.height = `${height}px`\n        map_div2.style.width = `${width}px`\n      }\n      if (map_div) {\n        map_div.style.height = `${height}px`\n        map_div.style.width = `${width}px`\n\n        if (fig.indexOf(\"document.getElementById('export')\") !== -1) {\n          let a = document.createElement(\"a\");\n          a.href = \"#\";\n          a.id = \"export\";\n          a.innerHTML = \"Export\";\n          document.body.appendChild(a);\n        }\n\n        const render_script = document.createElement(\"script\")\n        // HACK -- update the folium-generated JS to add, most importantly,\n        // the map to this global variable so that it can be used elsewhere\n        // in the script.\n        let set_global_data = `\n          window.__GLOBAL_DATA__ = {\n            map: map_div,\n            bounds: map_div.getBounds(),\n            lat_lng_clicked: null,\n            last_object_clicked: null,\n            all_drawings: null,\n            last_active_drawing: null,\n            zoom: null,\n            drawnItems: drawnItems,\n        };`;\n        let replaced = fig + set_global_data;\n        render_script.innerHTML = replaced;\n        document.body.appendChild(render_script);\n\n        const global_data = __GLOBAL_DATA__;\n        let map = global_data.map;\n\n        map.on('click', onMapClick);\n        map.on('moveend', onMapMove);\n        for (let key in map._layers) {\n          let layer = map._layers[key];\n          layer.on(\"click\", onLayerClick)\n        }\n        map.on('draw:created', onDraw);\n\n        Streamlit.setFrameHeight()\n        updateComponentValue();\n      }\n    }\n  }\n}\n\n// Attach our `onRender` handler to Streamlit's render event.\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender)\n\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()"],"sourceRoot":""}