# Examples for {{ package.library_name }} {{ package.service_name.class_name }} module

> [Index](../README.md) > [{{ service_name.class_name }}](./README.md) > Examples

## Client

### Implicit type annotations

Can be used with `{{ package.data.PYPI_NAME }}[{{ package.service_name.extras_name }}]` package installed.

Write your `{{ package.service_name.class_name }}` code as usual,
type checking and code completion should work out of the box.

{% set method = package.client.methods[1] if len(package.client.methods) > 1 else None -%}
{% set paginator = package.paginators[0] if package.paginators else None -%}
{% set waiter = package.waiters[0] if package.waiters else None -%}
```python
from aiobotocore.session import get_session


session = get_session()

# client has type {{ package.client.name }}
# and provides type checking and code completion
async with session.create_client("{{ package.service_name.boto3_name }}") as client:
    {% if method %}
    # result has type {{ method.return_type.render() }}
    # and provides type checking and code completion
    # IDE should show a hint with argument names and types
    result = await client.{{ method.name }}()
    {% endif %}

    {% if paginator %}
    # paginator has type {{ paginator.name }} and provides type checking
    # and code completion for paginate method
    paginator = client.get_paginator("{{ paginator.operation_name }}")
    async for item in paginator.paginate(...):
        # item has type {{ paginator.methods[0].return_type.children[0].render() }}
        print(item)
    {% endif %}

    {% if waiter %}
    # waiter has type {{ waiter.name }} and provides type checking
    # and code completion for wait method
    waiter = client.get_waiter("{{ waiter.waiter_name }}")
    await waiter.wait()
    {% endif %}
```

### Explicit type annotations

With `{{ package.data.PYPI_LITE_NAME }}[{{ package.service_name.extras_name }}]`
or a standalone `{{ package.name }}` package, you have to explicitly specify
`client: {{ package.client.name }}` type annotation.

All other type annotations are optional, as types should be discovered automatically.
However, these type annotations can be helpful in your functions and methods.

```python
from aiobotocore.session import get_session

from {{ package.name }}.client import {{ package.client.name }}
{% if method %}from {{ package.name }}.type_defs import {{ method.return_type.render() }}{% endif %}
{% if paginator %}from {{ package.name }}.paginator import {{ paginator.name }}{% endif %}
{% if waiter %}from {{ package.name }}.waiter import {{ waiter.name }}{% endif %}
{% if paginator %}from {{ package.name }}.literals import PaginatorName{% endif %}
{% if waiter %}from {{ package.name }}.literals import WaiterName{% endif %}


session = get_session()

async with session.create_client("{{ package.service_name.boto3_name }}") as client:
    client: {{ package.client.name }}

    {% if method %}
    result: {{ method.return_type.render() }} = client.{{ method.name }}()
    {% endif %}

    {% if paginator %}
    paginator_name: PaginatorName = "{{ paginator.operation_name }}"
    paginator: {{ paginator.name }} = client.get_paginator(paginator_name)
    async for item in paginator.paginate(...):
        item: {{ paginator.methods[0].return_type.children[0].render() }}
        print(item)
    {% endif %}

    {% if waiter %}
    waiter_name: WaiterName = "{{ waiter.waiter_name }}"
    waiter: {{ waiter.name }} = client.get_waiter(waiter_name)
    await waiter.wait()
    {% endif %}
```
