"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import baikal.language.language_service_pb2
import grpc

class LanguageServiceStub:
    """Provides text analysis operations such as sentiment analysis and entity
    recognition.
     // Analyzes the sentiment of the provided text.
     rpc AnalyzeSentiment(AnalyzeSentimentRequest) returns (AnalyzeSentimentResponse) {
     }

     // Finds named entities (currently proper names and common nouns) in the text
     // along with entity types, salience, mentions for each entity, and
     // other properties.
     rpc AnalyzeEntities(AnalyzeEntitiesRequest) returns (AnalyzeEntitiesResponse) {
     }

     // Finds entities, similar to [AnalyzeEntities][google.cloud.language.v1.LanguageService.AnalyzeEntities] in the text and analyzes
     // sentiment associated with each entity and its mentions.
     rpc AnalyzeEntitySentiment(AnalyzeEntitySentimentRequest) returns (AnalyzeEntitySentimentResponse) {
     }
    """
    def __init__(self, channel: grpc.Channel) -> None: ...
    AnalyzeSyntax: grpc.UnaryUnaryMultiCallable[
        baikal.language.language_service_pb2.AnalyzeSyntaxRequest,
        baikal.language.language_service_pb2.AnalyzeSyntaxResponse] = ...
    """Analyzes the syntax of the text and provides sentence boundaries and
    tokenization along with part of speech tags, dependency trees, and other
    properties.
    """


class LanguageServiceServicer(metaclass=abc.ABCMeta):
    """Provides text analysis operations such as sentiment analysis and entity
    recognition.
     // Analyzes the sentiment of the provided text.
     rpc AnalyzeSentiment(AnalyzeSentimentRequest) returns (AnalyzeSentimentResponse) {
     }

     // Finds named entities (currently proper names and common nouns) in the text
     // along with entity types, salience, mentions for each entity, and
     // other properties.
     rpc AnalyzeEntities(AnalyzeEntitiesRequest) returns (AnalyzeEntitiesResponse) {
     }

     // Finds entities, similar to [AnalyzeEntities][google.cloud.language.v1.LanguageService.AnalyzeEntities] in the text and analyzes
     // sentiment associated with each entity and its mentions.
     rpc AnalyzeEntitySentiment(AnalyzeEntitySentimentRequest) returns (AnalyzeEntitySentimentResponse) {
     }
    """
    @abc.abstractmethod
    def AnalyzeSyntax(self,
        request: baikal.language.language_service_pb2.AnalyzeSyntaxRequest,
        context: grpc.ServicerContext,
    ) -> baikal.language.language_service_pb2.AnalyzeSyntaxResponse:
        """Analyzes the syntax of the text and provides sentence boundaries and
        tokenization along with part of speech tags, dependency trees, and other
        properties.
        """
        pass


def add_LanguageServiceServicer_to_server(servicer: LanguageServiceServicer, server: grpc.Server) -> None: ...
