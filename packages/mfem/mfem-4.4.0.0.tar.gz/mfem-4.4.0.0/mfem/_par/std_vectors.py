# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _std_vectors
else:
    import _std_vectors

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _std_vectors.SWIG_PyInstanceMethod_New
_swig_new_static_method = _std_vectors.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import mfem._par.array
import mfem._par.mem_manager
class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _std_vectors.delete_SwigPyIterator

    def value(self):
        r"""value(SwigPyIterator self) -> PyObject *"""
        return _std_vectors.SwigPyIterator_value(self)
    value = _swig_new_instance_method(_std_vectors.SwigPyIterator_value)

    def incr(self, n=1):
        r"""incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _std_vectors.SwigPyIterator_incr(self, n)
    incr = _swig_new_instance_method(_std_vectors.SwigPyIterator_incr)

    def decr(self, n=1):
        r"""decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"""
        return _std_vectors.SwigPyIterator_decr(self, n)
    decr = _swig_new_instance_method(_std_vectors.SwigPyIterator_decr)

    def distance(self, x):
        r"""distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _std_vectors.SwigPyIterator_distance(self, x)
    distance = _swig_new_instance_method(_std_vectors.SwigPyIterator_distance)

    def equal(self, x):
        r"""equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _std_vectors.SwigPyIterator_equal(self, x)
    equal = _swig_new_instance_method(_std_vectors.SwigPyIterator_equal)

    def copy(self):
        r"""copy(SwigPyIterator self) -> SwigPyIterator"""
        return _std_vectors.SwigPyIterator_copy(self)
    copy = _swig_new_instance_method(_std_vectors.SwigPyIterator_copy)

    def next(self):
        r"""next(SwigPyIterator self) -> PyObject *"""
        return _std_vectors.SwigPyIterator_next(self)
    next = _swig_new_instance_method(_std_vectors.SwigPyIterator_next)

    def __next__(self):
        r"""__next__(SwigPyIterator self) -> PyObject *"""
        return _std_vectors.SwigPyIterator___next__(self)
    __next__ = _swig_new_instance_method(_std_vectors.SwigPyIterator___next__)

    def previous(self):
        r"""previous(SwigPyIterator self) -> PyObject *"""
        return _std_vectors.SwigPyIterator_previous(self)
    previous = _swig_new_instance_method(_std_vectors.SwigPyIterator_previous)

    def advance(self, n):
        r"""advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _std_vectors.SwigPyIterator_advance(self, n)
    advance = _swig_new_instance_method(_std_vectors.SwigPyIterator_advance)

    def __eq__(self, x):
        r"""__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _std_vectors.SwigPyIterator___eq__(self, x)
    __eq__ = _swig_new_instance_method(_std_vectors.SwigPyIterator___eq__)

    def __ne__(self, x):
        r"""__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _std_vectors.SwigPyIterator___ne__(self, x)
    __ne__ = _swig_new_instance_method(_std_vectors.SwigPyIterator___ne__)

    def __iadd__(self, n):
        r"""__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _std_vectors.SwigPyIterator___iadd__(self, n)
    __iadd__ = _swig_new_instance_method(_std_vectors.SwigPyIterator___iadd__)

    def __isub__(self, n):
        r"""__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _std_vectors.SwigPyIterator___isub__(self, n)
    __isub__ = _swig_new_instance_method(_std_vectors.SwigPyIterator___isub__)

    def __add__(self, n):
        r"""__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _std_vectors.SwigPyIterator___add__(self, n)
    __add__ = _swig_new_instance_method(_std_vectors.SwigPyIterator___add__)

    def __sub__(self, *args):
        r"""
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _std_vectors.SwigPyIterator___sub__(self, *args)
    __sub__ = _swig_new_instance_method(_std_vectors.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _std_vectors:
_std_vectors.SwigPyIterator_swigregister(SwigPyIterator)

class vector_int(object):
    r"""Proxy of C++ std::vector< int > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_int self) -> SwigPyIterator"""
        return _std_vectors.vector_int_iterator(self)
    iterator = _swig_new_instance_method(_std_vectors.vector_int_iterator)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_int self) -> bool"""
        return _std_vectors.vector_int___nonzero__(self)
    __nonzero__ = _swig_new_instance_method(_std_vectors.vector_int___nonzero__)

    def __bool__(self):
        r"""__bool__(vector_int self) -> bool"""
        return _std_vectors.vector_int___bool__(self)
    __bool__ = _swig_new_instance_method(_std_vectors.vector_int___bool__)

    def __len__(self):
        r"""__len__(vector_int self) -> std::vector< int >::size_type"""
        return _std_vectors.vector_int___len__(self)
    __len__ = _swig_new_instance_method(_std_vectors.vector_int___len__)

    def __getslice__(self, i, j):
        r"""__getslice__(vector_int self, std::vector< int >::difference_type i, std::vector< int >::difference_type j) -> vector_int"""
        return _std_vectors.vector_int___getslice__(self, i, j)
    __getslice__ = _swig_new_instance_method(_std_vectors.vector_int___getslice__)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_int self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)
        __setslice__(vector_int self, std::vector< int >::difference_type i, std::vector< int >::difference_type j, vector_int v)
        """
        return _std_vectors.vector_int___setslice__(self, *args)
    __setslice__ = _swig_new_instance_method(_std_vectors.vector_int___setslice__)

    def __delslice__(self, i, j):
        r"""__delslice__(vector_int self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)"""
        return _std_vectors.vector_int___delslice__(self, i, j)
    __delslice__ = _swig_new_instance_method(_std_vectors.vector_int___delslice__)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_int self, std::vector< int >::difference_type i)
        __delitem__(vector_int self, PySliceObject * slice)
        """
        return _std_vectors.vector_int___delitem__(self, *args)
    __delitem__ = _swig_new_instance_method(_std_vectors.vector_int___delitem__)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_int self, PySliceObject * slice) -> vector_int
        __getitem__(vector_int self, std::vector< int >::difference_type i) -> std::vector< int >::value_type const &
        """
        return _std_vectors.vector_int___getitem__(self, *args)
    __getitem__ = _swig_new_instance_method(_std_vectors.vector_int___getitem__)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_int self, PySliceObject * slice, vector_int v)
        __setitem__(vector_int self, PySliceObject * slice)
        __setitem__(vector_int self, std::vector< int >::difference_type i, std::vector< int >::value_type const & x)
        """
        return _std_vectors.vector_int___setitem__(self, *args)
    __setitem__ = _swig_new_instance_method(_std_vectors.vector_int___setitem__)

    def pop(self):
        r"""pop(vector_int self) -> std::vector< int >::value_type"""
        return _std_vectors.vector_int_pop(self)
    pop = _swig_new_instance_method(_std_vectors.vector_int_pop)

    def append(self, x):
        r"""append(vector_int self, std::vector< int >::value_type const & x)"""
        return _std_vectors.vector_int_append(self, x)
    append = _swig_new_instance_method(_std_vectors.vector_int_append)

    def empty(self):
        r"""empty(vector_int self) -> bool"""
        return _std_vectors.vector_int_empty(self)
    empty = _swig_new_instance_method(_std_vectors.vector_int_empty)

    def size(self):
        r"""size(vector_int self) -> std::vector< int >::size_type"""
        return _std_vectors.vector_int_size(self)
    size = _swig_new_instance_method(_std_vectors.vector_int_size)

    def swap(self, v):
        r"""swap(vector_int self, vector_int v)"""
        return _std_vectors.vector_int_swap(self, v)
    swap = _swig_new_instance_method(_std_vectors.vector_int_swap)

    def begin(self):
        r"""begin(vector_int self) -> std::vector< int >::iterator"""
        return _std_vectors.vector_int_begin(self)
    begin = _swig_new_instance_method(_std_vectors.vector_int_begin)

    def end(self):
        r"""end(vector_int self) -> std::vector< int >::iterator"""
        return _std_vectors.vector_int_end(self)
    end = _swig_new_instance_method(_std_vectors.vector_int_end)

    def rbegin(self):
        r"""rbegin(vector_int self) -> std::vector< int >::reverse_iterator"""
        return _std_vectors.vector_int_rbegin(self)
    rbegin = _swig_new_instance_method(_std_vectors.vector_int_rbegin)

    def rend(self):
        r"""rend(vector_int self) -> std::vector< int >::reverse_iterator"""
        return _std_vectors.vector_int_rend(self)
    rend = _swig_new_instance_method(_std_vectors.vector_int_rend)

    def clear(self):
        r"""clear(vector_int self)"""
        return _std_vectors.vector_int_clear(self)
    clear = _swig_new_instance_method(_std_vectors.vector_int_clear)

    def get_allocator(self):
        r"""get_allocator(vector_int self) -> std::vector< int >::allocator_type"""
        return _std_vectors.vector_int_get_allocator(self)
    get_allocator = _swig_new_instance_method(_std_vectors.vector_int_get_allocator)

    def pop_back(self):
        r"""pop_back(vector_int self)"""
        return _std_vectors.vector_int_pop_back(self)
    pop_back = _swig_new_instance_method(_std_vectors.vector_int_pop_back)

    def erase(self, *args):
        r"""
        erase(vector_int self, std::vector< int >::iterator pos) -> std::vector< int >::iterator
        erase(vector_int self, std::vector< int >::iterator first, std::vector< int >::iterator last) -> std::vector< int >::iterator
        """
        return _std_vectors.vector_int_erase(self, *args)
    erase = _swig_new_instance_method(_std_vectors.vector_int_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_int self) -> vector_int
        __init__(vector_int self, vector_int other) -> vector_int
        __init__(vector_int self, std::vector< int >::size_type size) -> vector_int
        __init__(vector_int self, std::vector< int >::size_type size, std::vector< int >::value_type const & value) -> vector_int
        """
        _std_vectors.vector_int_swiginit(self, _std_vectors.new_vector_int(*args))

    def push_back(self, x):
        r"""push_back(vector_int self, std::vector< int >::value_type const & x)"""
        return _std_vectors.vector_int_push_back(self, x)
    push_back = _swig_new_instance_method(_std_vectors.vector_int_push_back)

    def front(self):
        r"""front(vector_int self) -> std::vector< int >::value_type const &"""
        return _std_vectors.vector_int_front(self)
    front = _swig_new_instance_method(_std_vectors.vector_int_front)

    def back(self):
        r"""back(vector_int self) -> std::vector< int >::value_type const &"""
        return _std_vectors.vector_int_back(self)
    back = _swig_new_instance_method(_std_vectors.vector_int_back)

    def assign(self, n, x):
        r"""assign(vector_int self, std::vector< int >::size_type n, std::vector< int >::value_type const & x)"""
        return _std_vectors.vector_int_assign(self, n, x)
    assign = _swig_new_instance_method(_std_vectors.vector_int_assign)

    def resize(self, *args):
        r"""
        resize(vector_int self, std::vector< int >::size_type new_size)
        resize(vector_int self, std::vector< int >::size_type new_size, std::vector< int >::value_type const & x)
        """
        return _std_vectors.vector_int_resize(self, *args)
    resize = _swig_new_instance_method(_std_vectors.vector_int_resize)

    def insert(self, *args):
        r"""
        insert(vector_int self, std::vector< int >::iterator pos, std::vector< int >::value_type const & x) -> std::vector< int >::iterator
        insert(vector_int self, std::vector< int >::iterator pos, std::vector< int >::size_type n, std::vector< int >::value_type const & x)
        """
        return _std_vectors.vector_int_insert(self, *args)
    insert = _swig_new_instance_method(_std_vectors.vector_int_insert)

    def reserve(self, n):
        r"""reserve(vector_int self, std::vector< int >::size_type n)"""
        return _std_vectors.vector_int_reserve(self, n)
    reserve = _swig_new_instance_method(_std_vectors.vector_int_reserve)

    def capacity(self):
        r"""capacity(vector_int self) -> std::vector< int >::size_type"""
        return _std_vectors.vector_int_capacity(self)
    capacity = _swig_new_instance_method(_std_vectors.vector_int_capacity)
    __swig_destroy__ = _std_vectors.delete_vector_int

# Register vector_int in _std_vectors:
_std_vectors.vector_int_swigregister(vector_int)

class vector_Vector(object):
    r"""Proxy of C++ std::vector< mfem::Vector > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_Vector self) -> SwigPyIterator"""
        return _std_vectors.vector_Vector_iterator(self)
    iterator = _swig_new_instance_method(_std_vectors.vector_Vector_iterator)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_Vector self) -> bool"""
        return _std_vectors.vector_Vector___nonzero__(self)
    __nonzero__ = _swig_new_instance_method(_std_vectors.vector_Vector___nonzero__)

    def __bool__(self):
        r"""__bool__(vector_Vector self) -> bool"""
        return _std_vectors.vector_Vector___bool__(self)
    __bool__ = _swig_new_instance_method(_std_vectors.vector_Vector___bool__)

    def __len__(self):
        r"""__len__(vector_Vector self) -> std::vector< mfem::Vector >::size_type"""
        return _std_vectors.vector_Vector___len__(self)
    __len__ = _swig_new_instance_method(_std_vectors.vector_Vector___len__)

    def __getslice__(self, i, j):
        r"""__getslice__(vector_Vector self, std::vector< mfem::Vector >::difference_type i, std::vector< mfem::Vector >::difference_type j) -> vector_Vector"""
        return _std_vectors.vector_Vector___getslice__(self, i, j)
    __getslice__ = _swig_new_instance_method(_std_vectors.vector_Vector___getslice__)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_Vector self, std::vector< mfem::Vector >::difference_type i, std::vector< mfem::Vector >::difference_type j)
        __setslice__(vector_Vector self, std::vector< mfem::Vector >::difference_type i, std::vector< mfem::Vector >::difference_type j, vector_Vector v)
        """
        return _std_vectors.vector_Vector___setslice__(self, *args)
    __setslice__ = _swig_new_instance_method(_std_vectors.vector_Vector___setslice__)

    def __delslice__(self, i, j):
        r"""__delslice__(vector_Vector self, std::vector< mfem::Vector >::difference_type i, std::vector< mfem::Vector >::difference_type j)"""
        return _std_vectors.vector_Vector___delslice__(self, i, j)
    __delslice__ = _swig_new_instance_method(_std_vectors.vector_Vector___delslice__)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_Vector self, std::vector< mfem::Vector >::difference_type i)
        __delitem__(vector_Vector self, PySliceObject * slice)
        """
        return _std_vectors.vector_Vector___delitem__(self, *args)
    __delitem__ = _swig_new_instance_method(_std_vectors.vector_Vector___delitem__)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_Vector self, PySliceObject * slice) -> vector_Vector
        __getitem__(vector_Vector self, std::vector< mfem::Vector >::difference_type i) -> std::vector< mfem::Vector >::value_type const &
        """
        return _std_vectors.vector_Vector___getitem__(self, *args)
    __getitem__ = _swig_new_instance_method(_std_vectors.vector_Vector___getitem__)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_Vector self, PySliceObject * slice, vector_Vector v)
        __setitem__(vector_Vector self, PySliceObject * slice)
        __setitem__(vector_Vector self, std::vector< mfem::Vector >::difference_type i, std::vector< mfem::Vector >::value_type const & x)
        """
        return _std_vectors.vector_Vector___setitem__(self, *args)
    __setitem__ = _swig_new_instance_method(_std_vectors.vector_Vector___setitem__)

    def pop(self):
        r"""pop(vector_Vector self) -> std::vector< mfem::Vector >::value_type"""
        return _std_vectors.vector_Vector_pop(self)
    pop = _swig_new_instance_method(_std_vectors.vector_Vector_pop)

    def append(self, x):
        r"""append(vector_Vector self, std::vector< mfem::Vector >::value_type const & x)"""
        return _std_vectors.vector_Vector_append(self, x)
    append = _swig_new_instance_method(_std_vectors.vector_Vector_append)

    def empty(self):
        r"""empty(vector_Vector self) -> bool"""
        return _std_vectors.vector_Vector_empty(self)
    empty = _swig_new_instance_method(_std_vectors.vector_Vector_empty)

    def size(self):
        r"""size(vector_Vector self) -> std::vector< mfem::Vector >::size_type"""
        return _std_vectors.vector_Vector_size(self)
    size = _swig_new_instance_method(_std_vectors.vector_Vector_size)

    def swap(self, v):
        r"""swap(vector_Vector self, vector_Vector v)"""
        return _std_vectors.vector_Vector_swap(self, v)
    swap = _swig_new_instance_method(_std_vectors.vector_Vector_swap)

    def begin(self):
        r"""begin(vector_Vector self) -> std::vector< mfem::Vector >::iterator"""
        return _std_vectors.vector_Vector_begin(self)
    begin = _swig_new_instance_method(_std_vectors.vector_Vector_begin)

    def end(self):
        r"""end(vector_Vector self) -> std::vector< mfem::Vector >::iterator"""
        return _std_vectors.vector_Vector_end(self)
    end = _swig_new_instance_method(_std_vectors.vector_Vector_end)

    def rbegin(self):
        r"""rbegin(vector_Vector self) -> std::vector< mfem::Vector >::reverse_iterator"""
        return _std_vectors.vector_Vector_rbegin(self)
    rbegin = _swig_new_instance_method(_std_vectors.vector_Vector_rbegin)

    def rend(self):
        r"""rend(vector_Vector self) -> std::vector< mfem::Vector >::reverse_iterator"""
        return _std_vectors.vector_Vector_rend(self)
    rend = _swig_new_instance_method(_std_vectors.vector_Vector_rend)

    def clear(self):
        r"""clear(vector_Vector self)"""
        return _std_vectors.vector_Vector_clear(self)
    clear = _swig_new_instance_method(_std_vectors.vector_Vector_clear)

    def get_allocator(self):
        r"""get_allocator(vector_Vector self) -> std::vector< mfem::Vector >::allocator_type"""
        return _std_vectors.vector_Vector_get_allocator(self)
    get_allocator = _swig_new_instance_method(_std_vectors.vector_Vector_get_allocator)

    def pop_back(self):
        r"""pop_back(vector_Vector self)"""
        return _std_vectors.vector_Vector_pop_back(self)
    pop_back = _swig_new_instance_method(_std_vectors.vector_Vector_pop_back)

    def erase(self, *args):
        r"""
        erase(vector_Vector self, std::vector< mfem::Vector >::iterator pos) -> std::vector< mfem::Vector >::iterator
        erase(vector_Vector self, std::vector< mfem::Vector >::iterator first, std::vector< mfem::Vector >::iterator last) -> std::vector< mfem::Vector >::iterator
        """
        return _std_vectors.vector_Vector_erase(self, *args)
    erase = _swig_new_instance_method(_std_vectors.vector_Vector_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_Vector self) -> vector_Vector
        __init__(vector_Vector self, vector_Vector other) -> vector_Vector
        __init__(vector_Vector self, std::vector< mfem::Vector >::size_type size) -> vector_Vector
        __init__(vector_Vector self, std::vector< mfem::Vector >::size_type size, std::vector< mfem::Vector >::value_type const & value) -> vector_Vector
        """
        _std_vectors.vector_Vector_swiginit(self, _std_vectors.new_vector_Vector(*args))

    def push_back(self, x):
        r"""push_back(vector_Vector self, std::vector< mfem::Vector >::value_type const & x)"""
        return _std_vectors.vector_Vector_push_back(self, x)
    push_back = _swig_new_instance_method(_std_vectors.vector_Vector_push_back)

    def front(self):
        r"""front(vector_Vector self) -> std::vector< mfem::Vector >::value_type const &"""
        return _std_vectors.vector_Vector_front(self)
    front = _swig_new_instance_method(_std_vectors.vector_Vector_front)

    def back(self):
        r"""back(vector_Vector self) -> std::vector< mfem::Vector >::value_type const &"""
        return _std_vectors.vector_Vector_back(self)
    back = _swig_new_instance_method(_std_vectors.vector_Vector_back)

    def assign(self, n, x):
        r"""assign(vector_Vector self, std::vector< mfem::Vector >::size_type n, std::vector< mfem::Vector >::value_type const & x)"""
        return _std_vectors.vector_Vector_assign(self, n, x)
    assign = _swig_new_instance_method(_std_vectors.vector_Vector_assign)

    def resize(self, *args):
        r"""
        resize(vector_Vector self, std::vector< mfem::Vector >::size_type new_size)
        resize(vector_Vector self, std::vector< mfem::Vector >::size_type new_size, std::vector< mfem::Vector >::value_type const & x)
        """
        return _std_vectors.vector_Vector_resize(self, *args)
    resize = _swig_new_instance_method(_std_vectors.vector_Vector_resize)

    def insert(self, *args):
        r"""
        insert(vector_Vector self, std::vector< mfem::Vector >::iterator pos, std::vector< mfem::Vector >::value_type const & x) -> std::vector< mfem::Vector >::iterator
        insert(vector_Vector self, std::vector< mfem::Vector >::iterator pos, std::vector< mfem::Vector >::size_type n, std::vector< mfem::Vector >::value_type const & x)
        """
        return _std_vectors.vector_Vector_insert(self, *args)
    insert = _swig_new_instance_method(_std_vectors.vector_Vector_insert)

    def reserve(self, n):
        r"""reserve(vector_Vector self, std::vector< mfem::Vector >::size_type n)"""
        return _std_vectors.vector_Vector_reserve(self, n)
    reserve = _swig_new_instance_method(_std_vectors.vector_Vector_reserve)

    def capacity(self):
        r"""capacity(vector_Vector self) -> std::vector< mfem::Vector >::size_type"""
        return _std_vectors.vector_Vector_capacity(self)
    capacity = _swig_new_instance_method(_std_vectors.vector_Vector_capacity)
    __swig_destroy__ = _std_vectors.delete_vector_Vector

# Register vector_Vector in _std_vectors:
_std_vectors.vector_Vector_swigregister(vector_Vector)

class vector_intArray(object):
    r"""Proxy of C++ std::vector< mfem::Array< int > > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_intArray self) -> SwigPyIterator"""
        return _std_vectors.vector_intArray_iterator(self)
    iterator = _swig_new_instance_method(_std_vectors.vector_intArray_iterator)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_intArray self) -> bool"""
        return _std_vectors.vector_intArray___nonzero__(self)
    __nonzero__ = _swig_new_instance_method(_std_vectors.vector_intArray___nonzero__)

    def __bool__(self):
        r"""__bool__(vector_intArray self) -> bool"""
        return _std_vectors.vector_intArray___bool__(self)
    __bool__ = _swig_new_instance_method(_std_vectors.vector_intArray___bool__)

    def __len__(self):
        r"""__len__(vector_intArray self) -> std::vector< mfem::Array< int > >::size_type"""
        return _std_vectors.vector_intArray___len__(self)
    __len__ = _swig_new_instance_method(_std_vectors.vector_intArray___len__)

    def __getslice__(self, i, j):
        r"""__getslice__(vector_intArray self, std::vector< mfem::Array< int > >::difference_type i, std::vector< mfem::Array< int > >::difference_type j) -> vector_intArray"""
        return _std_vectors.vector_intArray___getslice__(self, i, j)
    __getslice__ = _swig_new_instance_method(_std_vectors.vector_intArray___getslice__)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_intArray self, std::vector< mfem::Array< int > >::difference_type i, std::vector< mfem::Array< int > >::difference_type j)
        __setslice__(vector_intArray self, std::vector< mfem::Array< int > >::difference_type i, std::vector< mfem::Array< int > >::difference_type j, vector_intArray v)
        """
        return _std_vectors.vector_intArray___setslice__(self, *args)
    __setslice__ = _swig_new_instance_method(_std_vectors.vector_intArray___setslice__)

    def __delslice__(self, i, j):
        r"""__delslice__(vector_intArray self, std::vector< mfem::Array< int > >::difference_type i, std::vector< mfem::Array< int > >::difference_type j)"""
        return _std_vectors.vector_intArray___delslice__(self, i, j)
    __delslice__ = _swig_new_instance_method(_std_vectors.vector_intArray___delslice__)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_intArray self, std::vector< mfem::Array< int > >::difference_type i)
        __delitem__(vector_intArray self, PySliceObject * slice)
        """
        return _std_vectors.vector_intArray___delitem__(self, *args)
    __delitem__ = _swig_new_instance_method(_std_vectors.vector_intArray___delitem__)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_intArray self, PySliceObject * slice) -> vector_intArray
        __getitem__(vector_intArray self, std::vector< mfem::Array< int > >::difference_type i) -> intArray
        """
        return _std_vectors.vector_intArray___getitem__(self, *args)
    __getitem__ = _swig_new_instance_method(_std_vectors.vector_intArray___getitem__)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_intArray self, PySliceObject * slice, vector_intArray v)
        __setitem__(vector_intArray self, PySliceObject * slice)
        __setitem__(vector_intArray self, std::vector< mfem::Array< int > >::difference_type i, intArray x)
        """
        return _std_vectors.vector_intArray___setitem__(self, *args)
    __setitem__ = _swig_new_instance_method(_std_vectors.vector_intArray___setitem__)

    def pop(self):
        r"""pop(vector_intArray self) -> intArray"""
        return _std_vectors.vector_intArray_pop(self)
    pop = _swig_new_instance_method(_std_vectors.vector_intArray_pop)

    def append(self, x):
        r"""append(vector_intArray self, intArray x)"""
        return _std_vectors.vector_intArray_append(self, x)
    append = _swig_new_instance_method(_std_vectors.vector_intArray_append)

    def empty(self):
        r"""empty(vector_intArray self) -> bool"""
        return _std_vectors.vector_intArray_empty(self)
    empty = _swig_new_instance_method(_std_vectors.vector_intArray_empty)

    def size(self):
        r"""size(vector_intArray self) -> std::vector< mfem::Array< int > >::size_type"""
        return _std_vectors.vector_intArray_size(self)
    size = _swig_new_instance_method(_std_vectors.vector_intArray_size)

    def swap(self, v):
        r"""swap(vector_intArray self, vector_intArray v)"""
        return _std_vectors.vector_intArray_swap(self, v)
    swap = _swig_new_instance_method(_std_vectors.vector_intArray_swap)

    def begin(self):
        r"""begin(vector_intArray self) -> std::vector< mfem::Array< int > >::iterator"""
        return _std_vectors.vector_intArray_begin(self)
    begin = _swig_new_instance_method(_std_vectors.vector_intArray_begin)

    def end(self):
        r"""end(vector_intArray self) -> std::vector< mfem::Array< int > >::iterator"""
        return _std_vectors.vector_intArray_end(self)
    end = _swig_new_instance_method(_std_vectors.vector_intArray_end)

    def rbegin(self):
        r"""rbegin(vector_intArray self) -> std::vector< mfem::Array< int > >::reverse_iterator"""
        return _std_vectors.vector_intArray_rbegin(self)
    rbegin = _swig_new_instance_method(_std_vectors.vector_intArray_rbegin)

    def rend(self):
        r"""rend(vector_intArray self) -> std::vector< mfem::Array< int > >::reverse_iterator"""
        return _std_vectors.vector_intArray_rend(self)
    rend = _swig_new_instance_method(_std_vectors.vector_intArray_rend)

    def clear(self):
        r"""clear(vector_intArray self)"""
        return _std_vectors.vector_intArray_clear(self)
    clear = _swig_new_instance_method(_std_vectors.vector_intArray_clear)

    def get_allocator(self):
        r"""get_allocator(vector_intArray self) -> std::vector< mfem::Array< int > >::allocator_type"""
        return _std_vectors.vector_intArray_get_allocator(self)
    get_allocator = _swig_new_instance_method(_std_vectors.vector_intArray_get_allocator)

    def pop_back(self):
        r"""pop_back(vector_intArray self)"""
        return _std_vectors.vector_intArray_pop_back(self)
    pop_back = _swig_new_instance_method(_std_vectors.vector_intArray_pop_back)

    def erase(self, *args):
        r"""
        erase(vector_intArray self, std::vector< mfem::Array< int > >::iterator pos) -> std::vector< mfem::Array< int > >::iterator
        erase(vector_intArray self, std::vector< mfem::Array< int > >::iterator first, std::vector< mfem::Array< int > >::iterator last) -> std::vector< mfem::Array< int > >::iterator
        """
        return _std_vectors.vector_intArray_erase(self, *args)
    erase = _swig_new_instance_method(_std_vectors.vector_intArray_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_intArray self) -> vector_intArray
        __init__(vector_intArray self, vector_intArray other) -> vector_intArray
        __init__(vector_intArray self, std::vector< mfem::Array< int > >::size_type size) -> vector_intArray
        __init__(vector_intArray self, std::vector< mfem::Array< int > >::size_type size, intArray value) -> vector_intArray
        """
        _std_vectors.vector_intArray_swiginit(self, _std_vectors.new_vector_intArray(*args))

    def push_back(self, x):
        r"""push_back(vector_intArray self, intArray x)"""
        return _std_vectors.vector_intArray_push_back(self, x)
    push_back = _swig_new_instance_method(_std_vectors.vector_intArray_push_back)

    def front(self):
        r"""front(vector_intArray self) -> intArray"""
        return _std_vectors.vector_intArray_front(self)
    front = _swig_new_instance_method(_std_vectors.vector_intArray_front)

    def back(self):
        r"""back(vector_intArray self) -> intArray"""
        return _std_vectors.vector_intArray_back(self)
    back = _swig_new_instance_method(_std_vectors.vector_intArray_back)

    def assign(self, n, x):
        r"""assign(vector_intArray self, std::vector< mfem::Array< int > >::size_type n, intArray x)"""
        return _std_vectors.vector_intArray_assign(self, n, x)
    assign = _swig_new_instance_method(_std_vectors.vector_intArray_assign)

    def resize(self, *args):
        r"""
        resize(vector_intArray self, std::vector< mfem::Array< int > >::size_type new_size)
        resize(vector_intArray self, std::vector< mfem::Array< int > >::size_type new_size, intArray x)
        """
        return _std_vectors.vector_intArray_resize(self, *args)
    resize = _swig_new_instance_method(_std_vectors.vector_intArray_resize)

    def insert(self, *args):
        r"""
        insert(vector_intArray self, std::vector< mfem::Array< int > >::iterator pos, intArray x) -> std::vector< mfem::Array< int > >::iterator
        insert(vector_intArray self, std::vector< mfem::Array< int > >::iterator pos, std::vector< mfem::Array< int > >::size_type n, intArray x)
        """
        return _std_vectors.vector_intArray_insert(self, *args)
    insert = _swig_new_instance_method(_std_vectors.vector_intArray_insert)

    def reserve(self, n):
        r"""reserve(vector_intArray self, std::vector< mfem::Array< int > >::size_type n)"""
        return _std_vectors.vector_intArray_reserve(self, n)
    reserve = _swig_new_instance_method(_std_vectors.vector_intArray_reserve)

    def capacity(self):
        r"""capacity(vector_intArray self) -> std::vector< mfem::Array< int > >::size_type"""
        return _std_vectors.vector_intArray_capacity(self)
    capacity = _swig_new_instance_method(_std_vectors.vector_intArray_capacity)
    __swig_destroy__ = _std_vectors.delete_vector_intArray

# Register vector_intArray in _std_vectors:
_std_vectors.vector_intArray_swigregister(vector_intArray)

class vector_ParFiniteElementSpace(object):
    r"""Proxy of C++ std::vector< mfem::ParFiniteElementSpace * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_ParFiniteElementSpace self) -> SwigPyIterator"""
        return _std_vectors.vector_ParFiniteElementSpace_iterator(self)
    iterator = _swig_new_instance_method(_std_vectors.vector_ParFiniteElementSpace_iterator)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_ParFiniteElementSpace self) -> bool"""
        return _std_vectors.vector_ParFiniteElementSpace___nonzero__(self)
    __nonzero__ = _swig_new_instance_method(_std_vectors.vector_ParFiniteElementSpace___nonzero__)

    def __bool__(self):
        r"""__bool__(vector_ParFiniteElementSpace self) -> bool"""
        return _std_vectors.vector_ParFiniteElementSpace___bool__(self)
    __bool__ = _swig_new_instance_method(_std_vectors.vector_ParFiniteElementSpace___bool__)

    def __len__(self):
        r"""__len__(vector_ParFiniteElementSpace self) -> std::vector< mfem::ParFiniteElementSpace * >::size_type"""
        return _std_vectors.vector_ParFiniteElementSpace___len__(self)
    __len__ = _swig_new_instance_method(_std_vectors.vector_ParFiniteElementSpace___len__)

    def __getslice__(self, i, j):
        r"""__getslice__(vector_ParFiniteElementSpace self, std::vector< mfem::ParFiniteElementSpace * >::difference_type i, std::vector< mfem::ParFiniteElementSpace * >::difference_type j) -> vector_ParFiniteElementSpace"""
        return _std_vectors.vector_ParFiniteElementSpace___getslice__(self, i, j)
    __getslice__ = _swig_new_instance_method(_std_vectors.vector_ParFiniteElementSpace___getslice__)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_ParFiniteElementSpace self, std::vector< mfem::ParFiniteElementSpace * >::difference_type i, std::vector< mfem::ParFiniteElementSpace * >::difference_type j)
        __setslice__(vector_ParFiniteElementSpace self, std::vector< mfem::ParFiniteElementSpace * >::difference_type i, std::vector< mfem::ParFiniteElementSpace * >::difference_type j, vector_ParFiniteElementSpace v)
        """
        return _std_vectors.vector_ParFiniteElementSpace___setslice__(self, *args)
    __setslice__ = _swig_new_instance_method(_std_vectors.vector_ParFiniteElementSpace___setslice__)

    def __delslice__(self, i, j):
        r"""__delslice__(vector_ParFiniteElementSpace self, std::vector< mfem::ParFiniteElementSpace * >::difference_type i, std::vector< mfem::ParFiniteElementSpace * >::difference_type j)"""
        return _std_vectors.vector_ParFiniteElementSpace___delslice__(self, i, j)
    __delslice__ = _swig_new_instance_method(_std_vectors.vector_ParFiniteElementSpace___delslice__)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_ParFiniteElementSpace self, std::vector< mfem::ParFiniteElementSpace * >::difference_type i)
        __delitem__(vector_ParFiniteElementSpace self, PySliceObject * slice)
        """
        return _std_vectors.vector_ParFiniteElementSpace___delitem__(self, *args)
    __delitem__ = _swig_new_instance_method(_std_vectors.vector_ParFiniteElementSpace___delitem__)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_ParFiniteElementSpace self, PySliceObject * slice) -> vector_ParFiniteElementSpace
        __getitem__(vector_ParFiniteElementSpace self, std::vector< mfem::ParFiniteElementSpace * >::difference_type i) -> std::vector< mfem::ParFiniteElementSpace * >::value_type
        """
        return _std_vectors.vector_ParFiniteElementSpace___getitem__(self, *args)
    __getitem__ = _swig_new_instance_method(_std_vectors.vector_ParFiniteElementSpace___getitem__)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_ParFiniteElementSpace self, PySliceObject * slice, vector_ParFiniteElementSpace v)
        __setitem__(vector_ParFiniteElementSpace self, PySliceObject * slice)
        __setitem__(vector_ParFiniteElementSpace self, std::vector< mfem::ParFiniteElementSpace * >::difference_type i, std::vector< mfem::ParFiniteElementSpace * >::value_type x)
        """
        return _std_vectors.vector_ParFiniteElementSpace___setitem__(self, *args)
    __setitem__ = _swig_new_instance_method(_std_vectors.vector_ParFiniteElementSpace___setitem__)

    def pop(self):
        r"""pop(vector_ParFiniteElementSpace self) -> std::vector< mfem::ParFiniteElementSpace * >::value_type"""
        return _std_vectors.vector_ParFiniteElementSpace_pop(self)
    pop = _swig_new_instance_method(_std_vectors.vector_ParFiniteElementSpace_pop)

    def append(self, x):
        r"""append(vector_ParFiniteElementSpace self, std::vector< mfem::ParFiniteElementSpace * >::value_type x)"""
        return _std_vectors.vector_ParFiniteElementSpace_append(self, x)
    append = _swig_new_instance_method(_std_vectors.vector_ParFiniteElementSpace_append)

    def empty(self):
        r"""empty(vector_ParFiniteElementSpace self) -> bool"""
        return _std_vectors.vector_ParFiniteElementSpace_empty(self)
    empty = _swig_new_instance_method(_std_vectors.vector_ParFiniteElementSpace_empty)

    def size(self):
        r"""size(vector_ParFiniteElementSpace self) -> std::vector< mfem::ParFiniteElementSpace * >::size_type"""
        return _std_vectors.vector_ParFiniteElementSpace_size(self)
    size = _swig_new_instance_method(_std_vectors.vector_ParFiniteElementSpace_size)

    def swap(self, v):
        r"""swap(vector_ParFiniteElementSpace self, vector_ParFiniteElementSpace v)"""
        return _std_vectors.vector_ParFiniteElementSpace_swap(self, v)
    swap = _swig_new_instance_method(_std_vectors.vector_ParFiniteElementSpace_swap)

    def begin(self):
        r"""begin(vector_ParFiniteElementSpace self) -> std::vector< mfem::ParFiniteElementSpace * >::iterator"""
        return _std_vectors.vector_ParFiniteElementSpace_begin(self)
    begin = _swig_new_instance_method(_std_vectors.vector_ParFiniteElementSpace_begin)

    def end(self):
        r"""end(vector_ParFiniteElementSpace self) -> std::vector< mfem::ParFiniteElementSpace * >::iterator"""
        return _std_vectors.vector_ParFiniteElementSpace_end(self)
    end = _swig_new_instance_method(_std_vectors.vector_ParFiniteElementSpace_end)

    def rbegin(self):
        r"""rbegin(vector_ParFiniteElementSpace self) -> std::vector< mfem::ParFiniteElementSpace * >::reverse_iterator"""
        return _std_vectors.vector_ParFiniteElementSpace_rbegin(self)
    rbegin = _swig_new_instance_method(_std_vectors.vector_ParFiniteElementSpace_rbegin)

    def rend(self):
        r"""rend(vector_ParFiniteElementSpace self) -> std::vector< mfem::ParFiniteElementSpace * >::reverse_iterator"""
        return _std_vectors.vector_ParFiniteElementSpace_rend(self)
    rend = _swig_new_instance_method(_std_vectors.vector_ParFiniteElementSpace_rend)

    def clear(self):
        r"""clear(vector_ParFiniteElementSpace self)"""
        return _std_vectors.vector_ParFiniteElementSpace_clear(self)
    clear = _swig_new_instance_method(_std_vectors.vector_ParFiniteElementSpace_clear)

    def get_allocator(self):
        r"""get_allocator(vector_ParFiniteElementSpace self) -> std::vector< mfem::ParFiniteElementSpace * >::allocator_type"""
        return _std_vectors.vector_ParFiniteElementSpace_get_allocator(self)
    get_allocator = _swig_new_instance_method(_std_vectors.vector_ParFiniteElementSpace_get_allocator)

    def pop_back(self):
        r"""pop_back(vector_ParFiniteElementSpace self)"""
        return _std_vectors.vector_ParFiniteElementSpace_pop_back(self)
    pop_back = _swig_new_instance_method(_std_vectors.vector_ParFiniteElementSpace_pop_back)

    def erase(self, *args):
        r"""
        erase(vector_ParFiniteElementSpace self, std::vector< mfem::ParFiniteElementSpace * >::iterator pos) -> std::vector< mfem::ParFiniteElementSpace * >::iterator
        erase(vector_ParFiniteElementSpace self, std::vector< mfem::ParFiniteElementSpace * >::iterator first, std::vector< mfem::ParFiniteElementSpace * >::iterator last) -> std::vector< mfem::ParFiniteElementSpace * >::iterator
        """
        return _std_vectors.vector_ParFiniteElementSpace_erase(self, *args)
    erase = _swig_new_instance_method(_std_vectors.vector_ParFiniteElementSpace_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_ParFiniteElementSpace self) -> vector_ParFiniteElementSpace
        __init__(vector_ParFiniteElementSpace self, vector_ParFiniteElementSpace other) -> vector_ParFiniteElementSpace
        __init__(vector_ParFiniteElementSpace self, std::vector< mfem::ParFiniteElementSpace * >::size_type size) -> vector_ParFiniteElementSpace
        __init__(vector_ParFiniteElementSpace self, std::vector< mfem::ParFiniteElementSpace * >::size_type size, std::vector< mfem::ParFiniteElementSpace * >::value_type value) -> vector_ParFiniteElementSpace
        """
        _std_vectors.vector_ParFiniteElementSpace_swiginit(self, _std_vectors.new_vector_ParFiniteElementSpace(*args))

    def push_back(self, x):
        r"""push_back(vector_ParFiniteElementSpace self, std::vector< mfem::ParFiniteElementSpace * >::value_type x)"""
        return _std_vectors.vector_ParFiniteElementSpace_push_back(self, x)
    push_back = _swig_new_instance_method(_std_vectors.vector_ParFiniteElementSpace_push_back)

    def front(self):
        r"""front(vector_ParFiniteElementSpace self) -> std::vector< mfem::ParFiniteElementSpace * >::value_type"""
        return _std_vectors.vector_ParFiniteElementSpace_front(self)
    front = _swig_new_instance_method(_std_vectors.vector_ParFiniteElementSpace_front)

    def back(self):
        r"""back(vector_ParFiniteElementSpace self) -> std::vector< mfem::ParFiniteElementSpace * >::value_type"""
        return _std_vectors.vector_ParFiniteElementSpace_back(self)
    back = _swig_new_instance_method(_std_vectors.vector_ParFiniteElementSpace_back)

    def assign(self, n, x):
        r"""assign(vector_ParFiniteElementSpace self, std::vector< mfem::ParFiniteElementSpace * >::size_type n, std::vector< mfem::ParFiniteElementSpace * >::value_type x)"""
        return _std_vectors.vector_ParFiniteElementSpace_assign(self, n, x)
    assign = _swig_new_instance_method(_std_vectors.vector_ParFiniteElementSpace_assign)

    def resize(self, *args):
        r"""
        resize(vector_ParFiniteElementSpace self, std::vector< mfem::ParFiniteElementSpace * >::size_type new_size)
        resize(vector_ParFiniteElementSpace self, std::vector< mfem::ParFiniteElementSpace * >::size_type new_size, std::vector< mfem::ParFiniteElementSpace * >::value_type x)
        """
        return _std_vectors.vector_ParFiniteElementSpace_resize(self, *args)
    resize = _swig_new_instance_method(_std_vectors.vector_ParFiniteElementSpace_resize)

    def insert(self, *args):
        r"""
        insert(vector_ParFiniteElementSpace self, std::vector< mfem::ParFiniteElementSpace * >::iterator pos, std::vector< mfem::ParFiniteElementSpace * >::value_type x) -> std::vector< mfem::ParFiniteElementSpace * >::iterator
        insert(vector_ParFiniteElementSpace self, std::vector< mfem::ParFiniteElementSpace * >::iterator pos, std::vector< mfem::ParFiniteElementSpace * >::size_type n, std::vector< mfem::ParFiniteElementSpace * >::value_type x)
        """
        return _std_vectors.vector_ParFiniteElementSpace_insert(self, *args)
    insert = _swig_new_instance_method(_std_vectors.vector_ParFiniteElementSpace_insert)

    def reserve(self, n):
        r"""reserve(vector_ParFiniteElementSpace self, std::vector< mfem::ParFiniteElementSpace * >::size_type n)"""
        return _std_vectors.vector_ParFiniteElementSpace_reserve(self, n)
    reserve = _swig_new_instance_method(_std_vectors.vector_ParFiniteElementSpace_reserve)

    def capacity(self):
        r"""capacity(vector_ParFiniteElementSpace self) -> std::vector< mfem::ParFiniteElementSpace * >::size_type"""
        return _std_vectors.vector_ParFiniteElementSpace_capacity(self)
    capacity = _swig_new_instance_method(_std_vectors.vector_ParFiniteElementSpace_capacity)
    __swig_destroy__ = _std_vectors.delete_vector_ParFiniteElementSpace

# Register vector_ParFiniteElementSpace in _std_vectors:
_std_vectors.vector_ParFiniteElementSpace_swigregister(vector_ParFiniteElementSpace)

class vector_ParMesh(object):
    r"""Proxy of C++ std::vector< mfem::ParMesh * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_ParMesh self) -> SwigPyIterator"""
        return _std_vectors.vector_ParMesh_iterator(self)
    iterator = _swig_new_instance_method(_std_vectors.vector_ParMesh_iterator)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_ParMesh self) -> bool"""
        return _std_vectors.vector_ParMesh___nonzero__(self)
    __nonzero__ = _swig_new_instance_method(_std_vectors.vector_ParMesh___nonzero__)

    def __bool__(self):
        r"""__bool__(vector_ParMesh self) -> bool"""
        return _std_vectors.vector_ParMesh___bool__(self)
    __bool__ = _swig_new_instance_method(_std_vectors.vector_ParMesh___bool__)

    def __len__(self):
        r"""__len__(vector_ParMesh self) -> std::vector< mfem::ParMesh * >::size_type"""
        return _std_vectors.vector_ParMesh___len__(self)
    __len__ = _swig_new_instance_method(_std_vectors.vector_ParMesh___len__)

    def __getslice__(self, i, j):
        r"""__getslice__(vector_ParMesh self, std::vector< mfem::ParMesh * >::difference_type i, std::vector< mfem::ParMesh * >::difference_type j) -> vector_ParMesh"""
        return _std_vectors.vector_ParMesh___getslice__(self, i, j)
    __getslice__ = _swig_new_instance_method(_std_vectors.vector_ParMesh___getslice__)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_ParMesh self, std::vector< mfem::ParMesh * >::difference_type i, std::vector< mfem::ParMesh * >::difference_type j)
        __setslice__(vector_ParMesh self, std::vector< mfem::ParMesh * >::difference_type i, std::vector< mfem::ParMesh * >::difference_type j, vector_ParMesh v)
        """
        return _std_vectors.vector_ParMesh___setslice__(self, *args)
    __setslice__ = _swig_new_instance_method(_std_vectors.vector_ParMesh___setslice__)

    def __delslice__(self, i, j):
        r"""__delslice__(vector_ParMesh self, std::vector< mfem::ParMesh * >::difference_type i, std::vector< mfem::ParMesh * >::difference_type j)"""
        return _std_vectors.vector_ParMesh___delslice__(self, i, j)
    __delslice__ = _swig_new_instance_method(_std_vectors.vector_ParMesh___delslice__)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_ParMesh self, std::vector< mfem::ParMesh * >::difference_type i)
        __delitem__(vector_ParMesh self, PySliceObject * slice)
        """
        return _std_vectors.vector_ParMesh___delitem__(self, *args)
    __delitem__ = _swig_new_instance_method(_std_vectors.vector_ParMesh___delitem__)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_ParMesh self, PySliceObject * slice) -> vector_ParMesh
        __getitem__(vector_ParMesh self, std::vector< mfem::ParMesh * >::difference_type i) -> std::vector< mfem::ParMesh * >::value_type
        """
        return _std_vectors.vector_ParMesh___getitem__(self, *args)
    __getitem__ = _swig_new_instance_method(_std_vectors.vector_ParMesh___getitem__)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_ParMesh self, PySliceObject * slice, vector_ParMesh v)
        __setitem__(vector_ParMesh self, PySliceObject * slice)
        __setitem__(vector_ParMesh self, std::vector< mfem::ParMesh * >::difference_type i, std::vector< mfem::ParMesh * >::value_type x)
        """
        return _std_vectors.vector_ParMesh___setitem__(self, *args)
    __setitem__ = _swig_new_instance_method(_std_vectors.vector_ParMesh___setitem__)

    def pop(self):
        r"""pop(vector_ParMesh self) -> std::vector< mfem::ParMesh * >::value_type"""
        return _std_vectors.vector_ParMesh_pop(self)
    pop = _swig_new_instance_method(_std_vectors.vector_ParMesh_pop)

    def append(self, x):
        r"""append(vector_ParMesh self, std::vector< mfem::ParMesh * >::value_type x)"""
        return _std_vectors.vector_ParMesh_append(self, x)
    append = _swig_new_instance_method(_std_vectors.vector_ParMesh_append)

    def empty(self):
        r"""empty(vector_ParMesh self) -> bool"""
        return _std_vectors.vector_ParMesh_empty(self)
    empty = _swig_new_instance_method(_std_vectors.vector_ParMesh_empty)

    def size(self):
        r"""size(vector_ParMesh self) -> std::vector< mfem::ParMesh * >::size_type"""
        return _std_vectors.vector_ParMesh_size(self)
    size = _swig_new_instance_method(_std_vectors.vector_ParMesh_size)

    def swap(self, v):
        r"""swap(vector_ParMesh self, vector_ParMesh v)"""
        return _std_vectors.vector_ParMesh_swap(self, v)
    swap = _swig_new_instance_method(_std_vectors.vector_ParMesh_swap)

    def begin(self):
        r"""begin(vector_ParMesh self) -> std::vector< mfem::ParMesh * >::iterator"""
        return _std_vectors.vector_ParMesh_begin(self)
    begin = _swig_new_instance_method(_std_vectors.vector_ParMesh_begin)

    def end(self):
        r"""end(vector_ParMesh self) -> std::vector< mfem::ParMesh * >::iterator"""
        return _std_vectors.vector_ParMesh_end(self)
    end = _swig_new_instance_method(_std_vectors.vector_ParMesh_end)

    def rbegin(self):
        r"""rbegin(vector_ParMesh self) -> std::vector< mfem::ParMesh * >::reverse_iterator"""
        return _std_vectors.vector_ParMesh_rbegin(self)
    rbegin = _swig_new_instance_method(_std_vectors.vector_ParMesh_rbegin)

    def rend(self):
        r"""rend(vector_ParMesh self) -> std::vector< mfem::ParMesh * >::reverse_iterator"""
        return _std_vectors.vector_ParMesh_rend(self)
    rend = _swig_new_instance_method(_std_vectors.vector_ParMesh_rend)

    def clear(self):
        r"""clear(vector_ParMesh self)"""
        return _std_vectors.vector_ParMesh_clear(self)
    clear = _swig_new_instance_method(_std_vectors.vector_ParMesh_clear)

    def get_allocator(self):
        r"""get_allocator(vector_ParMesh self) -> std::vector< mfem::ParMesh * >::allocator_type"""
        return _std_vectors.vector_ParMesh_get_allocator(self)
    get_allocator = _swig_new_instance_method(_std_vectors.vector_ParMesh_get_allocator)

    def pop_back(self):
        r"""pop_back(vector_ParMesh self)"""
        return _std_vectors.vector_ParMesh_pop_back(self)
    pop_back = _swig_new_instance_method(_std_vectors.vector_ParMesh_pop_back)

    def erase(self, *args):
        r"""
        erase(vector_ParMesh self, std::vector< mfem::ParMesh * >::iterator pos) -> std::vector< mfem::ParMesh * >::iterator
        erase(vector_ParMesh self, std::vector< mfem::ParMesh * >::iterator first, std::vector< mfem::ParMesh * >::iterator last) -> std::vector< mfem::ParMesh * >::iterator
        """
        return _std_vectors.vector_ParMesh_erase(self, *args)
    erase = _swig_new_instance_method(_std_vectors.vector_ParMesh_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_ParMesh self) -> vector_ParMesh
        __init__(vector_ParMesh self, vector_ParMesh other) -> vector_ParMesh
        __init__(vector_ParMesh self, std::vector< mfem::ParMesh * >::size_type size) -> vector_ParMesh
        __init__(vector_ParMesh self, std::vector< mfem::ParMesh * >::size_type size, std::vector< mfem::ParMesh * >::value_type value) -> vector_ParMesh
        """
        _std_vectors.vector_ParMesh_swiginit(self, _std_vectors.new_vector_ParMesh(*args))

    def push_back(self, x):
        r"""push_back(vector_ParMesh self, std::vector< mfem::ParMesh * >::value_type x)"""
        return _std_vectors.vector_ParMesh_push_back(self, x)
    push_back = _swig_new_instance_method(_std_vectors.vector_ParMesh_push_back)

    def front(self):
        r"""front(vector_ParMesh self) -> std::vector< mfem::ParMesh * >::value_type"""
        return _std_vectors.vector_ParMesh_front(self)
    front = _swig_new_instance_method(_std_vectors.vector_ParMesh_front)

    def back(self):
        r"""back(vector_ParMesh self) -> std::vector< mfem::ParMesh * >::value_type"""
        return _std_vectors.vector_ParMesh_back(self)
    back = _swig_new_instance_method(_std_vectors.vector_ParMesh_back)

    def assign(self, n, x):
        r"""assign(vector_ParMesh self, std::vector< mfem::ParMesh * >::size_type n, std::vector< mfem::ParMesh * >::value_type x)"""
        return _std_vectors.vector_ParMesh_assign(self, n, x)
    assign = _swig_new_instance_method(_std_vectors.vector_ParMesh_assign)

    def resize(self, *args):
        r"""
        resize(vector_ParMesh self, std::vector< mfem::ParMesh * >::size_type new_size)
        resize(vector_ParMesh self, std::vector< mfem::ParMesh * >::size_type new_size, std::vector< mfem::ParMesh * >::value_type x)
        """
        return _std_vectors.vector_ParMesh_resize(self, *args)
    resize = _swig_new_instance_method(_std_vectors.vector_ParMesh_resize)

    def insert(self, *args):
        r"""
        insert(vector_ParMesh self, std::vector< mfem::ParMesh * >::iterator pos, std::vector< mfem::ParMesh * >::value_type x) -> std::vector< mfem::ParMesh * >::iterator
        insert(vector_ParMesh self, std::vector< mfem::ParMesh * >::iterator pos, std::vector< mfem::ParMesh * >::size_type n, std::vector< mfem::ParMesh * >::value_type x)
        """
        return _std_vectors.vector_ParMesh_insert(self, *args)
    insert = _swig_new_instance_method(_std_vectors.vector_ParMesh_insert)

    def reserve(self, n):
        r"""reserve(vector_ParMesh self, std::vector< mfem::ParMesh * >::size_type n)"""
        return _std_vectors.vector_ParMesh_reserve(self, n)
    reserve = _swig_new_instance_method(_std_vectors.vector_ParMesh_reserve)

    def capacity(self):
        r"""capacity(vector_ParMesh self) -> std::vector< mfem::ParMesh * >::size_type"""
        return _std_vectors.vector_ParMesh_capacity(self)
    capacity = _swig_new_instance_method(_std_vectors.vector_ParMesh_capacity)
    __swig_destroy__ = _std_vectors.delete_vector_ParMesh

# Register vector_ParMesh in _std_vectors:
_std_vectors.vector_ParMesh_swigregister(vector_ParMesh)

class vector_HypreParMatrix(object):
    r"""Proxy of C++ std::vector< mfem::HypreParMatrix * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(vector_HypreParMatrix self) -> SwigPyIterator"""
        return _std_vectors.vector_HypreParMatrix_iterator(self)
    iterator = _swig_new_instance_method(_std_vectors.vector_HypreParMatrix_iterator)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(vector_HypreParMatrix self) -> bool"""
        return _std_vectors.vector_HypreParMatrix___nonzero__(self)
    __nonzero__ = _swig_new_instance_method(_std_vectors.vector_HypreParMatrix___nonzero__)

    def __bool__(self):
        r"""__bool__(vector_HypreParMatrix self) -> bool"""
        return _std_vectors.vector_HypreParMatrix___bool__(self)
    __bool__ = _swig_new_instance_method(_std_vectors.vector_HypreParMatrix___bool__)

    def __len__(self):
        r"""__len__(vector_HypreParMatrix self) -> std::vector< mfem::HypreParMatrix * >::size_type"""
        return _std_vectors.vector_HypreParMatrix___len__(self)
    __len__ = _swig_new_instance_method(_std_vectors.vector_HypreParMatrix___len__)

    def __getslice__(self, i, j):
        r"""__getslice__(vector_HypreParMatrix self, std::vector< mfem::HypreParMatrix * >::difference_type i, std::vector< mfem::HypreParMatrix * >::difference_type j) -> vector_HypreParMatrix"""
        return _std_vectors.vector_HypreParMatrix___getslice__(self, i, j)
    __getslice__ = _swig_new_instance_method(_std_vectors.vector_HypreParMatrix___getslice__)

    def __setslice__(self, *args):
        r"""
        __setslice__(vector_HypreParMatrix self, std::vector< mfem::HypreParMatrix * >::difference_type i, std::vector< mfem::HypreParMatrix * >::difference_type j)
        __setslice__(vector_HypreParMatrix self, std::vector< mfem::HypreParMatrix * >::difference_type i, std::vector< mfem::HypreParMatrix * >::difference_type j, vector_HypreParMatrix v)
        """
        return _std_vectors.vector_HypreParMatrix___setslice__(self, *args)
    __setslice__ = _swig_new_instance_method(_std_vectors.vector_HypreParMatrix___setslice__)

    def __delslice__(self, i, j):
        r"""__delslice__(vector_HypreParMatrix self, std::vector< mfem::HypreParMatrix * >::difference_type i, std::vector< mfem::HypreParMatrix * >::difference_type j)"""
        return _std_vectors.vector_HypreParMatrix___delslice__(self, i, j)
    __delslice__ = _swig_new_instance_method(_std_vectors.vector_HypreParMatrix___delslice__)

    def __delitem__(self, *args):
        r"""
        __delitem__(vector_HypreParMatrix self, std::vector< mfem::HypreParMatrix * >::difference_type i)
        __delitem__(vector_HypreParMatrix self, PySliceObject * slice)
        """
        return _std_vectors.vector_HypreParMatrix___delitem__(self, *args)
    __delitem__ = _swig_new_instance_method(_std_vectors.vector_HypreParMatrix___delitem__)

    def __getitem__(self, *args):
        r"""
        __getitem__(vector_HypreParMatrix self, PySliceObject * slice) -> vector_HypreParMatrix
        __getitem__(vector_HypreParMatrix self, std::vector< mfem::HypreParMatrix * >::difference_type i) -> std::vector< mfem::HypreParMatrix * >::value_type
        """
        return _std_vectors.vector_HypreParMatrix___getitem__(self, *args)
    __getitem__ = _swig_new_instance_method(_std_vectors.vector_HypreParMatrix___getitem__)

    def __setitem__(self, *args):
        r"""
        __setitem__(vector_HypreParMatrix self, PySliceObject * slice, vector_HypreParMatrix v)
        __setitem__(vector_HypreParMatrix self, PySliceObject * slice)
        __setitem__(vector_HypreParMatrix self, std::vector< mfem::HypreParMatrix * >::difference_type i, std::vector< mfem::HypreParMatrix * >::value_type x)
        """
        return _std_vectors.vector_HypreParMatrix___setitem__(self, *args)
    __setitem__ = _swig_new_instance_method(_std_vectors.vector_HypreParMatrix___setitem__)

    def pop(self):
        r"""pop(vector_HypreParMatrix self) -> std::vector< mfem::HypreParMatrix * >::value_type"""
        return _std_vectors.vector_HypreParMatrix_pop(self)
    pop = _swig_new_instance_method(_std_vectors.vector_HypreParMatrix_pop)

    def append(self, x):
        r"""append(vector_HypreParMatrix self, std::vector< mfem::HypreParMatrix * >::value_type x)"""
        return _std_vectors.vector_HypreParMatrix_append(self, x)
    append = _swig_new_instance_method(_std_vectors.vector_HypreParMatrix_append)

    def empty(self):
        r"""empty(vector_HypreParMatrix self) -> bool"""
        return _std_vectors.vector_HypreParMatrix_empty(self)
    empty = _swig_new_instance_method(_std_vectors.vector_HypreParMatrix_empty)

    def size(self):
        r"""size(vector_HypreParMatrix self) -> std::vector< mfem::HypreParMatrix * >::size_type"""
        return _std_vectors.vector_HypreParMatrix_size(self)
    size = _swig_new_instance_method(_std_vectors.vector_HypreParMatrix_size)

    def swap(self, v):
        r"""swap(vector_HypreParMatrix self, vector_HypreParMatrix v)"""
        return _std_vectors.vector_HypreParMatrix_swap(self, v)
    swap = _swig_new_instance_method(_std_vectors.vector_HypreParMatrix_swap)

    def begin(self):
        r"""begin(vector_HypreParMatrix self) -> std::vector< mfem::HypreParMatrix * >::iterator"""
        return _std_vectors.vector_HypreParMatrix_begin(self)
    begin = _swig_new_instance_method(_std_vectors.vector_HypreParMatrix_begin)

    def end(self):
        r"""end(vector_HypreParMatrix self) -> std::vector< mfem::HypreParMatrix * >::iterator"""
        return _std_vectors.vector_HypreParMatrix_end(self)
    end = _swig_new_instance_method(_std_vectors.vector_HypreParMatrix_end)

    def rbegin(self):
        r"""rbegin(vector_HypreParMatrix self) -> std::vector< mfem::HypreParMatrix * >::reverse_iterator"""
        return _std_vectors.vector_HypreParMatrix_rbegin(self)
    rbegin = _swig_new_instance_method(_std_vectors.vector_HypreParMatrix_rbegin)

    def rend(self):
        r"""rend(vector_HypreParMatrix self) -> std::vector< mfem::HypreParMatrix * >::reverse_iterator"""
        return _std_vectors.vector_HypreParMatrix_rend(self)
    rend = _swig_new_instance_method(_std_vectors.vector_HypreParMatrix_rend)

    def clear(self):
        r"""clear(vector_HypreParMatrix self)"""
        return _std_vectors.vector_HypreParMatrix_clear(self)
    clear = _swig_new_instance_method(_std_vectors.vector_HypreParMatrix_clear)

    def get_allocator(self):
        r"""get_allocator(vector_HypreParMatrix self) -> std::vector< mfem::HypreParMatrix * >::allocator_type"""
        return _std_vectors.vector_HypreParMatrix_get_allocator(self)
    get_allocator = _swig_new_instance_method(_std_vectors.vector_HypreParMatrix_get_allocator)

    def pop_back(self):
        r"""pop_back(vector_HypreParMatrix self)"""
        return _std_vectors.vector_HypreParMatrix_pop_back(self)
    pop_back = _swig_new_instance_method(_std_vectors.vector_HypreParMatrix_pop_back)

    def erase(self, *args):
        r"""
        erase(vector_HypreParMatrix self, std::vector< mfem::HypreParMatrix * >::iterator pos) -> std::vector< mfem::HypreParMatrix * >::iterator
        erase(vector_HypreParMatrix self, std::vector< mfem::HypreParMatrix * >::iterator first, std::vector< mfem::HypreParMatrix * >::iterator last) -> std::vector< mfem::HypreParMatrix * >::iterator
        """
        return _std_vectors.vector_HypreParMatrix_erase(self, *args)
    erase = _swig_new_instance_method(_std_vectors.vector_HypreParMatrix_erase)

    def __init__(self, *args):
        r"""
        __init__(vector_HypreParMatrix self) -> vector_HypreParMatrix
        __init__(vector_HypreParMatrix self, vector_HypreParMatrix other) -> vector_HypreParMatrix
        __init__(vector_HypreParMatrix self, std::vector< mfem::HypreParMatrix * >::size_type size) -> vector_HypreParMatrix
        __init__(vector_HypreParMatrix self, std::vector< mfem::HypreParMatrix * >::size_type size, std::vector< mfem::HypreParMatrix * >::value_type value) -> vector_HypreParMatrix
        """
        _std_vectors.vector_HypreParMatrix_swiginit(self, _std_vectors.new_vector_HypreParMatrix(*args))

    def push_back(self, x):
        r"""push_back(vector_HypreParMatrix self, std::vector< mfem::HypreParMatrix * >::value_type x)"""
        return _std_vectors.vector_HypreParMatrix_push_back(self, x)
    push_back = _swig_new_instance_method(_std_vectors.vector_HypreParMatrix_push_back)

    def front(self):
        r"""front(vector_HypreParMatrix self) -> std::vector< mfem::HypreParMatrix * >::value_type"""
        return _std_vectors.vector_HypreParMatrix_front(self)
    front = _swig_new_instance_method(_std_vectors.vector_HypreParMatrix_front)

    def back(self):
        r"""back(vector_HypreParMatrix self) -> std::vector< mfem::HypreParMatrix * >::value_type"""
        return _std_vectors.vector_HypreParMatrix_back(self)
    back = _swig_new_instance_method(_std_vectors.vector_HypreParMatrix_back)

    def assign(self, n, x):
        r"""assign(vector_HypreParMatrix self, std::vector< mfem::HypreParMatrix * >::size_type n, std::vector< mfem::HypreParMatrix * >::value_type x)"""
        return _std_vectors.vector_HypreParMatrix_assign(self, n, x)
    assign = _swig_new_instance_method(_std_vectors.vector_HypreParMatrix_assign)

    def resize(self, *args):
        r"""
        resize(vector_HypreParMatrix self, std::vector< mfem::HypreParMatrix * >::size_type new_size)
        resize(vector_HypreParMatrix self, std::vector< mfem::HypreParMatrix * >::size_type new_size, std::vector< mfem::HypreParMatrix * >::value_type x)
        """
        return _std_vectors.vector_HypreParMatrix_resize(self, *args)
    resize = _swig_new_instance_method(_std_vectors.vector_HypreParMatrix_resize)

    def insert(self, *args):
        r"""
        insert(vector_HypreParMatrix self, std::vector< mfem::HypreParMatrix * >::iterator pos, std::vector< mfem::HypreParMatrix * >::value_type x) -> std::vector< mfem::HypreParMatrix * >::iterator
        insert(vector_HypreParMatrix self, std::vector< mfem::HypreParMatrix * >::iterator pos, std::vector< mfem::HypreParMatrix * >::size_type n, std::vector< mfem::HypreParMatrix * >::value_type x)
        """
        return _std_vectors.vector_HypreParMatrix_insert(self, *args)
    insert = _swig_new_instance_method(_std_vectors.vector_HypreParMatrix_insert)

    def reserve(self, n):
        r"""reserve(vector_HypreParMatrix self, std::vector< mfem::HypreParMatrix * >::size_type n)"""
        return _std_vectors.vector_HypreParMatrix_reserve(self, n)
    reserve = _swig_new_instance_method(_std_vectors.vector_HypreParMatrix_reserve)

    def capacity(self):
        r"""capacity(vector_HypreParMatrix self) -> std::vector< mfem::HypreParMatrix * >::size_type"""
        return _std_vectors.vector_HypreParMatrix_capacity(self)
    capacity = _swig_new_instance_method(_std_vectors.vector_HypreParMatrix_capacity)
    __swig_destroy__ = _std_vectors.delete_vector_HypreParMatrix

# Register vector_HypreParMatrix in _std_vectors:
_std_vectors.vector_HypreParMatrix_swigregister(vector_HypreParMatrix)



