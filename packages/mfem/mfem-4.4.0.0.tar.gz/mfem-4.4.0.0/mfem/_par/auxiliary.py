# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _auxiliary
else:
    import _auxiliary

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _auxiliary.SWIG_PyInstanceMethod_New
_swig_new_static_method = _auxiliary.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

MFEM_VERSION = _auxiliary.MFEM_VERSION
MFEM_VERSION_STRING = _auxiliary.MFEM_VERSION_STRING
MFEM_VERSION_TYPE = _auxiliary.MFEM_VERSION_TYPE
MFEM_VERSION_TYPE_RELEASE = _auxiliary.MFEM_VERSION_TYPE_RELEASE
MFEM_VERSION_TYPE_DEVELOPMENT = _auxiliary.MFEM_VERSION_TYPE_DEVELOPMENT
MFEM_VERSION_MAJOR = _auxiliary.MFEM_VERSION_MAJOR
MFEM_VERSION_MINOR = _auxiliary.MFEM_VERSION_MINOR
MFEM_VERSION_PATCH = _auxiliary.MFEM_VERSION_PATCH
import mfem._par.solvers
import mfem._par.globals
import mfem._par.vector
import mfem._par.array
import mfem._par.mem_manager
import mfem._par.operators
import mfem._par.matrix
import mfem._par.sparsemat
import mfem._par.densemat
import mfem._par.pfespace
import mfem._par.fespace
import mfem._par.coefficient
import mfem._par.symmat
import mfem._par.intrules
import mfem._par.eltrans
import mfem._par.fe
import mfem._par.geom
import mfem._par.fe_base
import mfem._par.fe_fixed_order
import mfem._par.element
import mfem._par.table
import mfem._par.hash
import mfem._par.fe_h1
import mfem._par.fe_nd
import mfem._par.fe_rt
import mfem._par.fe_l2
import mfem._par.fe_nurbs
import mfem._par.fe_pos
import mfem._par.fe_ser
import mfem._par.mesh
import mfem._par.sort_pairs
import mfem._par.ncmesh
import mfem._par.vtk
import mfem._par.vertex
import mfem._par.gridfunc
import mfem._par.bilininteg
import mfem._par.fe_coll
import mfem._par.lininteg
import mfem._par.linearform
import mfem._par.nonlininteg
import mfem._par.std_vectors
import mfem._par.doftrans
import mfem._par.handle
import mfem._par.hypre
import mfem._par.restriction
import mfem._par.pmesh
import mfem._par.pncmesh
import mfem._par.communication
import mfem._par.sets
class MatrixFreeAuxiliarySpace(mfem._par.operators.Solver):
    r"""Proxy of C++ mfem::MatrixFreeAuxiliarySpace class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(MatrixFreeAuxiliarySpace self, ParMesh mesh_lor, Coefficient alpha_coeff, Coefficient beta_coeff, MatrixCoefficient beta_mcoeff, intArray ess_bdr, Operator curlcurl_oper, Operator pi, int cg_iterations=0) -> MatrixFreeAuxiliarySpace
        __init__(MatrixFreeAuxiliarySpace self, ParMesh mesh_lor, Coefficient beta_coeff, MatrixCoefficient beta_mcoeff, intArray ess_bdr, Operator curlcurl_oper, Operator g, int cg_iterations=1) -> MatrixFreeAuxiliarySpace
        """
        _auxiliary.MatrixFreeAuxiliarySpace_swiginit(self, _auxiliary.new_MatrixFreeAuxiliarySpace(*args))
    __swig_destroy__ = _auxiliary.delete_MatrixFreeAuxiliarySpace

    def Mult(self, x, y):
        r"""Mult(MatrixFreeAuxiliarySpace self, Vector x, Vector y)"""
        return _auxiliary.MatrixFreeAuxiliarySpace_Mult(self, x, y)
    Mult = _swig_new_instance_method(_auxiliary.MatrixFreeAuxiliarySpace_Mult)

    def SetOperator(self, op):
        r"""SetOperator(MatrixFreeAuxiliarySpace self, Operator op)"""
        return _auxiliary.MatrixFreeAuxiliarySpace_SetOperator(self, op)
    SetOperator = _swig_new_instance_method(_auxiliary.MatrixFreeAuxiliarySpace_SetOperator)

# Register MatrixFreeAuxiliarySpace in _auxiliary:
_auxiliary.MatrixFreeAuxiliarySpace_swigregister(MatrixFreeAuxiliarySpace)

class GeneralAMS(mfem._par.operators.Solver):
    r"""Proxy of C++ mfem::GeneralAMS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, curlcurl_op_, pi_, gradient_, pispacesolver_, gspacesolver_, smoother_, ess_tdof_list_):
        r"""__init__(GeneralAMS self, Operator curlcurl_op_, Operator pi_, Operator gradient_, Operator pispacesolver_, Operator gspacesolver_, Operator smoother_, intArray ess_tdof_list_) -> GeneralAMS"""
        _auxiliary.GeneralAMS_swiginit(self, _auxiliary.new_GeneralAMS(curlcurl_op_, pi_, gradient_, pispacesolver_, gspacesolver_, smoother_, ess_tdof_list_))
    __swig_destroy__ = _auxiliary.delete_GeneralAMS

    def SetOperator(self, op):
        r"""SetOperator(GeneralAMS self, Operator op)"""
        return _auxiliary.GeneralAMS_SetOperator(self, op)
    SetOperator = _swig_new_instance_method(_auxiliary.GeneralAMS_SetOperator)

    def Mult(self, x, y):
        r"""Mult(GeneralAMS self, Vector x, Vector y)"""
        return _auxiliary.GeneralAMS_Mult(self, x, y)
    Mult = _swig_new_instance_method(_auxiliary.GeneralAMS_Mult)

# Register GeneralAMS in _auxiliary:
_auxiliary.GeneralAMS_swigregister(GeneralAMS)

class MatrixFreeAMS(mfem._par.operators.Solver):
    r"""Proxy of C++ mfem::MatrixFreeAMS class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, aform, oper, nd_fespace, alpha_coeff, beta_coeff, beta_mcoeff, ess_bdr, inner_pi_its=0, inner_g_its=1, nd_smoother=None):
        r"""__init__(MatrixFreeAMS self, mfem::ParBilinearForm & aform, Operator oper, ParFiniteElementSpace nd_fespace, Coefficient alpha_coeff, Coefficient beta_coeff, MatrixCoefficient beta_mcoeff, intArray ess_bdr, int inner_pi_its=0, int inner_g_its=1, Solver nd_smoother=None) -> MatrixFreeAMS"""
        _auxiliary.MatrixFreeAMS_swiginit(self, _auxiliary.new_MatrixFreeAMS(aform, oper, nd_fespace, alpha_coeff, beta_coeff, beta_mcoeff, ess_bdr, inner_pi_its, inner_g_its, nd_smoother))
    __swig_destroy__ = _auxiliary.delete_MatrixFreeAMS

    def SetOperator(self, op):
        r"""SetOperator(MatrixFreeAMS self, Operator op)"""
        return _auxiliary.MatrixFreeAMS_SetOperator(self, op)
    SetOperator = _swig_new_instance_method(_auxiliary.MatrixFreeAMS_SetOperator)

    def Mult(self, x, y):
        r"""Mult(MatrixFreeAMS self, Vector x, Vector y)"""
        return _auxiliary.MatrixFreeAMS_Mult(self, x, y)
    Mult = _swig_new_instance_method(_auxiliary.MatrixFreeAMS_Mult)

# Register MatrixFreeAMS in _auxiliary:
_auxiliary.MatrixFreeAMS_swigregister(MatrixFreeAMS)



