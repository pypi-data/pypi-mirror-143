# Install

Default pip install installs serial MFEM + wrapper

$ pip install mfem --no-binary mfem

For other configuration such as parallel version, one has to download
the package and run setup script. pip download command download tar-gziped
package.

$ pip download mfem --no-binary mfem

Once the package is expanded, enter the package directory and
use the setup.py on the top level. For example, --with-parallel option,
it build MFEM in both serial and parallel and build wrapper. It also
download Metis and Hypre for parallel MFEM.

Note: python3 setup.py instal is deprecated. A recommended way is to use
python -m pip install. Translation is straighforward.

(old) python setup.py install --with-parallel
(new) python -m pip install ./ --install-option="--with-parallel"

One can also specify the MFEM installed in other location using
--mfem-prefix=<xxxx>. This will regenerate the SWIG wrapper. Or
you can use --mfem-prefix-no-swig=<xxxx> to reuse the wrapper code
distributed with this package

setup.py allows various options. Some examples are listed below.
Use -help to see the full list.

$ python setup.py install --help

* build MFEM with suitesparse (only for parallel build)
(old) $ python3 setup.py install --with-suitesparse --suitesparse-prefix='xxx' --with-parallel

* building external (metis/hypre/mfem)
(old) $ python3 setup.py install --prefix=~/sandbox --verbose --ext-only --with-parallel

* building PyMFEM (after --ext-only)
(old) python3 setup.py install --prefix=~/sandbox --verbose --skip-ext --with-parallel
(new) python -m pip install ./ --verbose --install-option="--mfem-branch=master" --install-option="--mfem-source=external/mfem" --install-option="--skip-ext" --install-option="--with-parallel"

* run swig
(old) python3 setup.py install --prefix=~/sandbox --verbose --skip-ext --with-parallel --swig
(new) python -m pip install ./ --verbose --install-option="--mfem-branch=master" --install-option="--mfem-source=external/mfem" --install-option="--swig" --install-option="--with-parallel"

* clean up all externals
$ python setup.py clean --all-externals

* choosing compiler
$ python setup.py install --parallel --CC=xxx, --CXX=xxx, --MPICC=xxx, --MPICXX=xxx

* build with a specific mfem branch
$ python setup.py install --mfem-branch="mfem-4.3-dev"

# Using additional features (GPU, HYPRE-GPU, libCEED, GSLIB)
Following features are supported. However, the build process is more involved.
First we need to build MFEM and other libraries (without building wrapper), this allows for
proper config.mk. Then, we re-genearte SWIG wrapper codes. For this, SWIG 4.0.2 is required.
After that, we build wrapper code.

Note that --ext-only option directs setup.py to build only the external libraries, while
--skip-ext option does do opposite.

For example,

$ python setup.py install --with-libceed --ext-only
$ python setup.py clean -swig
$ python setup.py install  --with-libceed --swig
$ python setup.py install  --with-libceed --skip-ext

* cuda
cuda build supports both serial/parallel. In parallel, hypre cuda build is also
supported. If you need, use --cuda-arch to specify cuda compute capablility.
(See table in https://en.wikipedia.org/wiki/CUDA#Supported_GPUs)

$ python setup.py install --with-cuda
$ python setup.py install --with-cuda --with-cuda-hypre
$ python setup.py install --with-cuda --with-cuda-hypre --cuda-arch=80 (A100)
$ python setup.py install --with-cuda --with-cuda-hypre --cuda-arch=75 (Turing)

Again, actual build build requires to regenerate wrapper.

$ python setup.py install  --with-cuda (--with-parallel) --ext-only --cuda-arch=xx (choose appropriate xx for your GPU)
$ python setup.py clean --swig (or one can do $ touch mfem/*/*.i)
$ python setup.py install  --with-cuda (--with-parallel) --swig
$ python setup.py install  --with-cuda (--with-parallel) --skip-ext

* libceed
$ python setup.py install  --with-libceed --

* Turn on everything...:D
$ python setup.py install --with-parallel --with-cuda --with-libceed --with-gslib  --with-cuda-hypre





