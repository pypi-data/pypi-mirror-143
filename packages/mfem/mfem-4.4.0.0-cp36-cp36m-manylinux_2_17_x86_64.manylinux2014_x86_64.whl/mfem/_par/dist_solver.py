# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _dist_solver
else:
    import _dist_solver

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _dist_solver.SWIG_PyInstanceMethod_New
_swig_new_static_method = _dist_solver.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

import mfem._par.element
import mfem._par.globals
import mfem._par.array
import mfem._par.mem_manager
import mfem._par.densemat
import mfem._par.vector
import mfem._par.operators
import mfem._par.matrix
import mfem._par.geom
import mfem._par.intrules
import mfem._par.table
import mfem._par.hash
import mfem._par.coefficient
import mfem._par.symmat
import mfem._par.sparsemat
import mfem._par.eltrans
import mfem._par.fe
import mfem._par.fe_base
import mfem._par.fe_fixed_order
import mfem._par.fe_h1
import mfem._par.fe_nd
import mfem._par.fe_rt
import mfem._par.fe_l2
import mfem._par.fe_nurbs
import mfem._par.fe_pos
import mfem._par.fe_ser
import mfem._par.pgridfunc
import mfem._par.pfespace
import mfem._par.fespace
import mfem._par.mesh
import mfem._par.sort_pairs
import mfem._par.ncmesh
import mfem._par.vtk
import mfem._par.vertex
import mfem._par.gridfunc
import mfem._par.bilininteg
import mfem._par.fe_coll
import mfem._par.lininteg
import mfem._par.linearform
import mfem._par.nonlininteg
import mfem._par.std_vectors
import mfem._par.doftrans
import mfem._par.handle
import mfem._par.hypre
import mfem._par.restriction
import mfem._par.pmesh
import mfem._par.pncmesh
import mfem._par.communication
import mfem._par.sets

def AvgElementSize(pmesh):
    r"""AvgElementSize(ParMesh pmesh) -> double"""
    return _dist_solver.AvgElementSize(pmesh)
AvgElementSize = _dist_solver.AvgElementSize
class DistanceSolver(object):
    r"""Proxy of C++ mfem::DistanceSolver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    print_level = property(_dist_solver.DistanceSolver_print_level_get, _dist_solver.DistanceSolver_print_level_set, doc=r"""print_level : int""")
    __swig_destroy__ = _dist_solver.delete_DistanceSolver

    def ComputeScalarDistance(self, zero_level_set, distance):
        r"""ComputeScalarDistance(DistanceSolver self, Coefficient zero_level_set, ParGridFunction distance)"""
        return _dist_solver.DistanceSolver_ComputeScalarDistance(self, zero_level_set, distance)
    ComputeScalarDistance = _swig_new_instance_method(_dist_solver.DistanceSolver_ComputeScalarDistance)

    def ComputeVectorDistance(self, zero_level_set, distance):
        r"""ComputeVectorDistance(DistanceSolver self, Coefficient zero_level_set, ParGridFunction distance)"""
        return _dist_solver.DistanceSolver_ComputeVectorDistance(self, zero_level_set, distance)
    ComputeVectorDistance = _swig_new_instance_method(_dist_solver.DistanceSolver_ComputeVectorDistance)

# Register DistanceSolver in _dist_solver:
_dist_solver.DistanceSolver_swigregister(DistanceSolver)

class HeatDistanceSolver(DistanceSolver):
    r"""Proxy of C++ mfem::HeatDistanceSolver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, diff_coeff):
        r"""__init__(HeatDistanceSolver self, double diff_coeff) -> HeatDistanceSolver"""
        _dist_solver.HeatDistanceSolver_swiginit(self, _dist_solver.new_HeatDistanceSolver(diff_coeff))

    def ComputeScalarDistance(self, zero_level_set, distance):
        r"""ComputeScalarDistance(HeatDistanceSolver self, Coefficient zero_level_set, ParGridFunction distance)"""
        return _dist_solver.HeatDistanceSolver_ComputeScalarDistance(self, zero_level_set, distance)
    ComputeScalarDistance = _swig_new_instance_method(_dist_solver.HeatDistanceSolver_ComputeScalarDistance)
    parameter_t = property(_dist_solver.HeatDistanceSolver_parameter_t_get, _dist_solver.HeatDistanceSolver_parameter_t_set, doc=r"""parameter_t : double""")
    smooth_steps = property(_dist_solver.HeatDistanceSolver_smooth_steps_get, _dist_solver.HeatDistanceSolver_smooth_steps_set, doc=r"""smooth_steps : int""")
    diffuse_iter = property(_dist_solver.HeatDistanceSolver_diffuse_iter_get, _dist_solver.HeatDistanceSolver_diffuse_iter_set, doc=r"""diffuse_iter : int""")
    transform = property(_dist_solver.HeatDistanceSolver_transform_get, _dist_solver.HeatDistanceSolver_transform_set, doc=r"""transform : bool""")
    vis_glvis = property(_dist_solver.HeatDistanceSolver_vis_glvis_get, _dist_solver.HeatDistanceSolver_vis_glvis_set, doc=r"""vis_glvis : bool""")
    __swig_destroy__ = _dist_solver.delete_HeatDistanceSolver

# Register HeatDistanceSolver in _dist_solver:
_dist_solver.HeatDistanceSolver_swigregister(HeatDistanceSolver)

class PLapDistanceSolver(DistanceSolver):
    r"""Proxy of C++ mfem::PLapDistanceSolver class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, maxp_=30, newton_iter_=10, rtol=1e-7, atol=1e-12, print_lv=0):
        r"""__init__(PLapDistanceSolver self, int maxp_=30, int newton_iter_=10, double rtol=1e-7, double atol=1e-12, int print_lv=0) -> PLapDistanceSolver"""
        _dist_solver.PLapDistanceSolver_swiginit(self, _dist_solver.new_PLapDistanceSolver(maxp_, newton_iter_, rtol, atol, print_lv))

    def SetMaxPower(self, new_pp):
        r"""SetMaxPower(PLapDistanceSolver self, int new_pp)"""
        return _dist_solver.PLapDistanceSolver_SetMaxPower(self, new_pp)
    SetMaxPower = _swig_new_instance_method(_dist_solver.PLapDistanceSolver_SetMaxPower)

    def ComputeScalarDistance(self, func, fdist):
        r"""ComputeScalarDistance(PLapDistanceSolver self, Coefficient func, ParGridFunction fdist)"""
        return _dist_solver.PLapDistanceSolver_ComputeScalarDistance(self, func, fdist)
    ComputeScalarDistance = _swig_new_instance_method(_dist_solver.PLapDistanceSolver_ComputeScalarDistance)
    __swig_destroy__ = _dist_solver.delete_PLapDistanceSolver

# Register PLapDistanceSolver in _dist_solver:
_dist_solver.PLapDistanceSolver_swigregister(PLapDistanceSolver)

class NormalizedGradCoefficient(mfem._par.coefficient.VectorCoefficient):
    r"""Proxy of C++ mfem::NormalizedGradCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def Eval(self, *args):
        r"""
        Eval(NormalizedGradCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)
        Eval(NormalizedGradCoefficient self, DenseMatrix M, ElementTransformation T, IntegrationRule ir)
        Eval(NormalizedGradCoefficient self, Vector V, ElementTransformation T, IntegrationPoint ip)
        """
        return _dist_solver.NormalizedGradCoefficient_Eval(self, *args)
    Eval = _swig_new_instance_method(_dist_solver.NormalizedGradCoefficient_Eval)
    __swig_destroy__ = _dist_solver.delete_NormalizedGradCoefficient

# Register NormalizedGradCoefficient in _dist_solver:
_dist_solver.NormalizedGradCoefficient_swigregister(NormalizedGradCoefficient)

class PProductCoefficient(mfem._par.coefficient.Coefficient):
    r"""Proxy of C++ mfem::PProductCoefficient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, basec_, corrc_):
        r"""__init__(PProductCoefficient self, Coefficient basec_, Coefficient corrc_) -> PProductCoefficient"""
        _dist_solver.PProductCoefficient_swiginit(self, _dist_solver.new_PProductCoefficient(basec_, corrc_))

    def Eval(self, T, ip):
        r"""Eval(PProductCoefficient self, ElementTransformation T, IntegrationPoint ip) -> double"""
        return _dist_solver.PProductCoefficient_Eval(self, T, ip)
    Eval = _swig_new_instance_method(_dist_solver.PProductCoefficient_Eval)
    __swig_destroy__ = _dist_solver.delete_PProductCoefficient

# Register PProductCoefficient in _dist_solver:
_dist_solver.PProductCoefficient_swigregister(PProductCoefficient)

class ScreenedPoisson(mfem._par.nonlininteg.NonlinearFormIntegrator):
    r"""Proxy of C++ mfem::ScreenedPoisson class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nfunc, rh):
        r"""__init__(ScreenedPoisson self, Coefficient nfunc, double rh) -> ScreenedPoisson"""
        _dist_solver.ScreenedPoisson_swiginit(self, _dist_solver.new_ScreenedPoisson(nfunc, rh))
    __swig_destroy__ = _dist_solver.delete_ScreenedPoisson

    def SetInput(self, nfunc):
        r"""SetInput(ScreenedPoisson self, Coefficient nfunc)"""
        return _dist_solver.ScreenedPoisson_SetInput(self, nfunc)
    SetInput = _swig_new_instance_method(_dist_solver.ScreenedPoisson_SetInput)

    def GetElementEnergy(self, el, trans, elfun):
        r"""GetElementEnergy(ScreenedPoisson self, FiniteElement el, ElementTransformation trans, Vector elfun) -> double"""
        return _dist_solver.ScreenedPoisson_GetElementEnergy(self, el, trans, elfun)
    GetElementEnergy = _swig_new_instance_method(_dist_solver.ScreenedPoisson_GetElementEnergy)

    def AssembleElementVector(self, el, trans, elfun, elvect):
        r"""AssembleElementVector(ScreenedPoisson self, FiniteElement el, ElementTransformation trans, Vector elfun, Vector elvect)"""
        return _dist_solver.ScreenedPoisson_AssembleElementVector(self, el, trans, elfun, elvect)
    AssembleElementVector = _swig_new_instance_method(_dist_solver.ScreenedPoisson_AssembleElementVector)

    def AssembleElementGrad(self, el, trans, elfun, elmat):
        r"""AssembleElementGrad(ScreenedPoisson self, FiniteElement el, ElementTransformation trans, Vector elfun, DenseMatrix elmat)"""
        return _dist_solver.ScreenedPoisson_AssembleElementGrad(self, el, trans, elfun, elmat)
    AssembleElementGrad = _swig_new_instance_method(_dist_solver.ScreenedPoisson_AssembleElementGrad)

# Register ScreenedPoisson in _dist_solver:
_dist_solver.ScreenedPoisson_swigregister(ScreenedPoisson)

class PUMPLaplacian(mfem._par.nonlininteg.NonlinearFormIntegrator):
    r"""Proxy of C++ mfem::PUMPLaplacian class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nfunc, nfgrad, ownership_=True):
        r"""__init__(PUMPLaplacian self, Coefficient nfunc, VectorCoefficient nfgrad, bool ownership_=True) -> PUMPLaplacian"""
        _dist_solver.PUMPLaplacian_swiginit(self, _dist_solver.new_PUMPLaplacian(nfunc, nfgrad, ownership_))

    def SetPower(self, pp_):
        r"""SetPower(PUMPLaplacian self, double pp_)"""
        return _dist_solver.PUMPLaplacian_SetPower(self, pp_)
    SetPower = _swig_new_instance_method(_dist_solver.PUMPLaplacian_SetPower)

    def SetReg(self, ee_):
        r"""SetReg(PUMPLaplacian self, double ee_)"""
        return _dist_solver.PUMPLaplacian_SetReg(self, ee_)
    SetReg = _swig_new_instance_method(_dist_solver.PUMPLaplacian_SetReg)
    __swig_destroy__ = _dist_solver.delete_PUMPLaplacian

    def GetElementEnergy(self, el, trans, elfun):
        r"""GetElementEnergy(PUMPLaplacian self, FiniteElement el, ElementTransformation trans, Vector elfun) -> double"""
        return _dist_solver.PUMPLaplacian_GetElementEnergy(self, el, trans, elfun)
    GetElementEnergy = _swig_new_instance_method(_dist_solver.PUMPLaplacian_GetElementEnergy)

    def AssembleElementVector(self, el, trans, elfun, elvect):
        r"""AssembleElementVector(PUMPLaplacian self, FiniteElement el, ElementTransformation trans, Vector elfun, Vector elvect)"""
        return _dist_solver.PUMPLaplacian_AssembleElementVector(self, el, trans, elfun, elvect)
    AssembleElementVector = _swig_new_instance_method(_dist_solver.PUMPLaplacian_AssembleElementVector)

    def AssembleElementGrad(self, el, trans, elfun, elmat):
        r"""AssembleElementGrad(PUMPLaplacian self, FiniteElement el, ElementTransformation trans, Vector elfun, DenseMatrix elmat)"""
        return _dist_solver.PUMPLaplacian_AssembleElementGrad(self, el, trans, elfun, elmat)
    AssembleElementGrad = _swig_new_instance_method(_dist_solver.PUMPLaplacian_AssembleElementGrad)

# Register PUMPLaplacian in _dist_solver:
_dist_solver.PUMPLaplacian_swigregister(PUMPLaplacian)

class PDEFilter(object):
    r"""Proxy of C++ mfem::PDEFilter class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, mesh, rh, order=2, maxiter=100, rtol=1e-12, atol=1e-15, print_lv=0):
        r"""__init__(PDEFilter self, ParMesh mesh, double rh, int order=2, int maxiter=100, double rtol=1e-12, double atol=1e-15, int print_lv=0) -> PDEFilter"""
        _dist_solver.PDEFilter_swiginit(self, _dist_solver.new_PDEFilter(mesh, rh, order, maxiter, rtol, atol, print_lv))
    __swig_destroy__ = _dist_solver.delete_PDEFilter

    def Filter(self, *args):
        r"""
        Filter(PDEFilter self, ParGridFunction func, ParGridFunction ffield)
        Filter(PDEFilter self, Coefficient func, ParGridFunction ffield)
        """
        return _dist_solver.PDEFilter_Filter(self, *args)
    Filter = _swig_new_instance_method(_dist_solver.PDEFilter_Filter)

# Register PDEFilter in _dist_solver:
_dist_solver.PDEFilter_swigregister(PDEFilter)



