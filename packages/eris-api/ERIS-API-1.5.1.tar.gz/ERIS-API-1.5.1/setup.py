# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['eris_api']

package_data = \
{'': ['*']}

install_requires = \
['pandas>=1.4.1,<2.0.0',
 'pydantic>=1.9.0,<2.0.0',
 'requests>=2.27.1,<3.0.0',
 'xmltodict>=0.12.0,<0.13.0']

setup_kwargs = {
    'name': 'eris-api',
    'version': '1.5.1',
    'description': '',
    'long_description': '# ERIS API\n\n## About\nPackage to wrap the ERIS API.\n\nIntended use is to simplify requesting data from ERIS.\n\nTo proceed the user must be added to the API group and you must also know the client ID of the group.\n\n# Install\n\n```\npip install ERIS-API\n```\n\n# Usage\n\nBasic flow is as follows. Example is also below:\n\n1. Create ERISAPI Class with following parameters\n    1. URL to ERIS. Include the trailing slash "https://www.eris.com/"\n    1. Client ID\n    1. Username\n    1. Password or Token\n\nyou may choose to omit the username/password/token if they are set in your environment variables as eris_username/etc.\n    \n2. Build Tag list\n    1. Each tag should be an instance of the `ERISTag` class\n\n3. Build Request Class\n    1. provide the start time, end time and either the single tag, or a list of tags\n\n4. call `request_api_data` method with request class\n    1. the response will be an `ERISResponse` class.\n\n## Authorization\n\nTo authorize the request you need to supply a `username` and one of `password` or `token`, in addition to the `client_id`.\n\nIf both a password and a token are supplied, it will default to the password.\n\n### Example\n```\nfrom ERIS_API import ERISAPI, ERISTag, ERISRequest\nimport datetime\n\nstart_time = datetime.datetime(2021,1,1)\nend_time = datetime.datetime(2021,2,1)\n\ninput_tags = [\n    ERISTag(label="sample label", tag="sampletag", mode="average", interval="P1D"),\n    ERISTag(label="sample label 2", tag="sampletag", mode="average", label="P2M"),\n]\n\nrequest_class = ERISRequest(\n    start_time=start_time,\n    end_time=end_time,\n    tags=input_tags\n)\n\n#password version\napi = ERISAPI(base_url="https://www.eris.com/", client_id="CLIENT_ID", username="USERNAME", password="PASSWORD")\n\n#token version\napi = ERISAPI(base_url="https://www.eris.com/", client_id="CLIENT_ID", username="USERNAME", token="TOKEN")\n\nresult = api.request_api_data(request_class)\n```\n\n## Working with the response\n\nOnce you have a valid response, the response class can be used to parse the data into either a json string or a pandas dataframe.\n\nAdditionally, the response class will also contain additional information such as eng. units, tagUID, description, etc. Look at the ERIS_Response.py class for details.\n\nWithin the response object there is the following properties:\n\n1. tag_data\n    * this is the processed tag, which contains additional information. Type is a dictionary.\n2. tag_dataframes\n    * This is the collection of tags converted to dataframes. \n    * Columns are `Timestamp,Tag,Value`\n3. response_class\n    * raw response class from request\n    * this contains the original response content\n\nFinally, the response will attempt to process the `Timestamp` to a python datetime friendly format, rounding to the nearest second. It will also try and parse the `Value` to a numeric value.\nIf this fails it will remain as exported.\n\nThis can be ignored by setting parse_datetime or parse_values to False in the `convert_tags_to_dataframes` function.\n\n### Example\n\n```\n# continuing from above.\nresult = api.request_api_data(request_class)\n\n# for one tag - change index to particular tag\ntag_df = result.tag_to_dataframe(result.tag_data[0])\n\n# can also specify which dictionary key to use (see the Response class) or a custom label. Will use custom label if both are given.\ntag_df = result.tag_to_dataframe(result.tag_data[0], custom_label="Custom Tag")\n\n# for all tags - concat argument will return either a single dataframe if True, or a list of individual tag dataframes if False\n\n# combined\ntag_df = result.convert_tags_to_dataframes(True)\n\n# individual\ntag_dfs = result.convert_tags_to_dataframes(False) \n```\n\n## Concurrent Requests\n\nIt is also possible to make the data requests concurrently.\n\nIt follows the same api as above, but uses the `request_api_data_concurrent` function instead. Additional parameters of `delta` and `workers` is also accepted.\n\n* `delta`: specifies the window to apply to the concurrent requests in days. Default is 30 -> window of 30 days per-request\n* `workers`: number of workers to distribute the tasks to. Default is 8.\n\nconcurrent request will return a list of `ERISResponses`. You should either iterate and call `convert_tags_to_dataframes` on each result, and then append to a dataframe with `pd.concat`, or use the `ERIS_API.combine_concurrent_results` function to combine the results\n\n```\n# continuing from above.\nresult = api.request_api_data_concurrent(request_class, delta=7)\n\ndf = api.combine_concurrent_results(result)\n\n```\n\n\n\n\n## Generic Request\n\nTo optionally pass a generic url to an eris endpoint use the `ERISAPI.request_data` function.\n\nThe function accepts a url and a dictionary of parameters. This is a generic wrapper around the `requests.get` function which takes care of the authentication step.\n\n```\napi = ERISAPI(url, username, password, client_id)\napi.request_data("/tag/list", parameters={})\n```\n\n## Next Steps\n\nYou, the user, can decide how to work with the output data from here. Either saving the dataframe(s) to excel, csv, or loading it into an SQL database.\n\n## Query Improvements\n\nTo improve query performance, your script should adjust the start date to the start/end times after any existing data to avoid re-requesting the same block.\n\n# Additional Functions\n\n## Extract Tag from  URL\n\nIf you have the URL of the tag, you can extract the components of the query via the method `extract_tags_from_url`\n\nCalling this method will return a JSON String of the contents of the dictionary.\n\n```\nfrom ERIS_API import extract_tags_from_url\n\ninput_url = "https://eris.com/api/rest/tag/data?start=2021-03-29T00:00:00&end=P1M3D&tags=sample_label:sample.tag:first:PT2M"\n\nextract_tags_from_url(input_url)\n\n# RESULT\n{\n    "start": [\n        "2021-03-29T00:00:00"\n    ],\n    "end": [\n        "P1M3D"\n    ],\n    "tags": [\n        {\n            "label": "sample_label",\n            "tag": "sample.tag",\n            "mode": "first",\n            "interval": "PT2M"\n        }\n    ]\n}\n```\n\n## JSON to Tag\n\nMethod to convert a .json file of your tag list to a list of ERISTags\n\nInput is either \n* `json_dict`: pre-loaded dictionary of your tags\n* `json_file`: file path to a json dictionary in the structure below\n\n### JSON Structure\n```\n[\n    {\n        "label": "lbl_value",\n        "tag": "tag_value",\n        "mode": "raw",\n        "interval": "P1D"\n    },\n    {\n        "label": "lbl_value2",\n        "tag": "tag_value2",\n        "mode": "raw",\n        "interval": "P1D"\n    }\n]\n```\n\n### Usage\n```\nfrom ERIS_API import json_to_tags\n\njson_dict = [\n    {\n        "label": "lbl_value",\n        "tag": "tag_value",\n        "mode": "raw",\n        "interval": "P1D"\n    },\n    {\n        "label": "lbl_value2",\n        "tag": "tag_value2",\n        "mode": "raw",\n        "interval": "P1D"\n    }\n]\njson_path = "eris_tags.json"\n\ntags = json_to_tags(json_dict=json_dict)\ntags = json_to_tags(json_path=json_path)\n```',
    'author': 'Cody Scott',
    'author_email': 'jcodyscott+eris@gmail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': None,
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.6,<4.0',
}


setup(**setup_kwargs)
