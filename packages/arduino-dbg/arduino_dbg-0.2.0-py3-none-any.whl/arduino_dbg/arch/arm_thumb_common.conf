# Common definitions across all ARM Thumb-only chips
#

include("defaults_common")

arch_interface = "ArmThumbArchInterface"
instruction_set = "thumb"

default_op_width = 2   # Standard opcode width to fetch/decode. Thumb-1 instructions
                       # are all 16bit. Thumb-2 includes mixed 16/32bit instructions.

int_size = 4       # 'int' type in C is 4 bytes.
push_word_len = 4  # PUSH/POP in 32-bit-aligned increments.
ret_addr_size = 4  # 32-bit pointer type.

endian = 'little'  # By default, system operates in little-endian mode.
                   # (Can be reconfigured with CONTROL register dynamically.)
stack_model = 'full_desc'  # $SP points to last filled memory address.

abi_uses_link_register = True  # 'BX' instruction saves return addr to $LR, not the stack.

# FlashPatch/Breakpoint (FPB) unit defined by ARM v7-M architecture describes how breakpoints
# are supported. Actual breakpoint register count is implementation-defined (and may be 0)
# but the spec says that can definitely be queried through on-device register introspection.
dynamic_breakpoints = True

# Number of general-purpose registers in the architecture.
# While technically all r0..r15 are 'general-purpose' from the POV of many
# instructions, several of them have specific uses, including $SP and $PC.
general_regs = 16

# Register names and order as reported by register-dump op in dbg service.
# Note: r12 is technically 'IP' (intra-procedure-call scratch reg) but Cortex
# CPUs treat it as general purpose. If we expand support past Cortex M0 and M4,
# consider renaming r12 to IP here. Likewise, Cortex-M* assigns no special role
# to the r9 "platform register".
#
# GNU binutils decodes r10 as '$sl' for Stack Limit, and r12 as 'IP', but we use both as GPRs.
register_list_fmt = [
    'r0',   'r1',  'r2',  'r3',   'r4',  'r5', 'r6', 'r7',
    'r8',   'r9',  'r10', 'FP',   'r12', 'SP', 'LR', 'PC',
    'CPSR', 'MSP', 'PSP', 'CTRL',
]


# Register array as used in CFA records (.debug_frame) for ARM Thumb architecture.
stack_unwind_registers = [
    'r0', 'r1', 'r2',  'r3', 'r4',  'r5', 'r6', 'r7',
    'r8', 'r9', 'r10', 'FP', 'r12', 'SP', 'LR', 'PC',
]

# ARM ABI "Procedure Call Standard" specifies that the following registers must
# be saved by the caller if they are valuable to the caller after the function
# call returns.  We warn when presenting locals that rely on 'unwinding' these
# registers.
#
# From the ABI Procedure Call Standard doc (6.1.1 "Core registers"):
# "A subroutine must preserve the contents of the registers r4-r8, r10, r11 and SP (and r9 in PCS
# variants that designate r9 as v6).
#
# In all variants of the procedure call standard, registers r12-r15 have special roles. In these
# roles they are labeled IP, SP, LR and PC."
#
# nb that Cortex-M* with gcc seems to deviate from this in that r12 has no special role?
# From disassembly examination I observe it being used as a temp-scratch register whose
# prior value is not preserved.
call_clobbered_registers = [
    'r0', 'r1', 'r2', 'r3', 'r12',
]
