# Common definitions across all Atmel AVR chips

include('defaults_common')

arch_interface = "AVRArchInterface"
instruction_set = "avr"

RAMSTART = 0x100
SPL_PORT = 0x3d # SPL defined in common; SPH defined for architectures with has_sph=True

SREG_PORT = 0x3f

AVR_PORT_OFFSET = 0x20 # Addresses of memory-mapped registers are 0x20 above their port id.

# Addresses in .data are at 0x800xxx in the ELF but just `xxx` on-chip.
DATA_ADDR_MASK = 0x7FFFFF

default_op_width = 2   # Standard opcode width to fetch/decode.

int_size = 2           # 'int' type in C is 2 bytes.

push_word_len = 1      # Each PUSH (POP) operation adds (subtracts) this many bytes to SP
ret_addr_size = 2      # Each CALL operation adds this many bytes to stack for return addr.
                       # TODO(aaron): Also used as a general-purpose 'address size' by the
                       # dwarf expr parser and MethodInfo.evalFrameBase(). Should we
                       # distinguish that as a different param?

endian = 'little'
stack_model = 'empty_desc'  # $SP points to next free memory address

abi_uses_link_register = False  # CALL instruction pushes return addr to stack.

# Can the client create new breakpoints while the program is running?
dynamic_breakpoints = False

# Number of general-purpose registers in the architecture.
general_regs = 32
# Register names and order as reported by register-dump op in dbg service.
register_list_fmt = [ "general_regs", "SP", "SREG", "PC" ]

# Register array as used in CFA records (.debug_frame) for AVR architecture.  $LR is a
# virtual "link register" as GCC records the return address as "register 36" in the CFA
# state machine. (SP is actually two 8-bit registers SPH:SPL = 33:32, but we record as
# a single register here. Function of registers 34 & 35 unknown.)
stack_unwind_registers = [
    'r0',   'r1',  'r2',  'r3',  'r4',  'r5',  'r6',  'r7',
    'r8',   'r9',  'r10', 'r11', 'r12', 'r13', 'r14', 'r15',
    'r16',  'r17', 'r18', 'r19', 'r20', 'r21', 'r22', 'r23',
    'r24',  'r25', 'r26', 'r27', 'r28', 'r29', 'r30', 'r31',
    'SP',   None,  None,  None,  'LR'
]

# gcc AVR ABI specifies that the following registers must be saved by the
# caller if they are valuable to the caller after the function call returns.
# We warn when presenting locals that rely on 'unwinding' these registers.
call_clobbered_registers = [
  'r18', 'r19', 'r20', 'r21', 'r22', 'r23', 'r24', 'r25',
  'r26', 'r27', 'r30', 'r31',
]

