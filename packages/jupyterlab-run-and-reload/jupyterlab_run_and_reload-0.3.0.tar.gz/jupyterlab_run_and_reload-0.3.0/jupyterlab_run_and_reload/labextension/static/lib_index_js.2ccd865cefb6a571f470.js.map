{"version":3,"file":"lib_index_js.2ccd865cefb6a571f470.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAA+D;AACR;AACG;AACd;AAC0B;AAClB;AACM;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,gCAAgC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oEAAgB;AAC/B,eAAe,yEAAgB,EAAE,iEAAe;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA,gBAAgB,kBAAkB;AAClC,yBAAyB,8DAAO;AAChC;AACA,oBAAoB,+DAAiB;AACrC,SAAS;AACT,0BAA0B,8DAAO;AACjC;AACA,oBAAoB,+DAAiB;AACrC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,+DAAa;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,0DAAO;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA,6CAA6C,+DAAa;AAC1D;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,wEAAsB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,+DAAa;AACzE;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,4DAA4D,+DAAa;AACzE;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA,aAAa;AACb;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA,aAAa;AACb;AACA;AACA;AACA,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;AC/HtB,iEAAe,4bAA4b,oCAAoC,eAAe,mCAAmC","sources":["webpack://jupyterlab_run_and_reload/./lib/index.js","webpack://jupyterlab_run_and_reload/./style/play-in-file.svg"],"sourcesContent":["import { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { ICommandPalette } from '@jupyterlab/apputils';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\nimport { toArray } from '@lumino/algorithm';\nimport { NotebookActions, NotebookPanel } from '@jupyterlab/notebook';\nimport { LabIcon } from '@jupyterlab/ui-components';\nimport playInFileIconStr from '../style/play-in-file.svg';\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.runAndReloadAll = 'run-and-reload:run-all-cells-and-reload';\n    CommandIDs.restartRunAndReloadAll = 'run-and-reload:restart-run-all-cells-and-reload';\n    // TODO: Import this from notebook extension\n    CommandIDs.restart = 'notebook:restart-kernel';\n})(CommandIDs || (CommandIDs = {}));\n// TODO: Change category to run items\nconst PALETTE_CATEGORY = 'Run and reload extension';\n/**\n * Initialization data for the jupyterlab_run_and_reload extension.\n *\n * TODOs:\n * - Add setting: file extensions to reload\n * - Add setting: only reload visible widgets or not\n * - Add toolbar button in notebook panel with run and reload\n * - Also add \"Restart kernel, run all cells and reload PDFs\"\n */\nconst plugin = {\n    id: 'jupyterlab_run_and_reload:plugin',\n    autoStart: true,\n    requires: [IDocumentManager],\n    optional: [ISettingRegistry, ICommandPalette],\n    activate: (app, manager, settingRegistry, palette) => {\n        console.log('JupyterLab extension jupyterlab_run_and_reload is activated!');\n        if (settingRegistry) {\n            settingRegistry\n                .load(plugin.id)\n                .then(settings => {\n                console.log('jupyterlab_run_and_reload settings loaded:', settings.composite);\n            })\n                .catch(reason => {\n                console.error('Failed to load settings for jupyterlab_run_and_reload.', reason);\n            });\n        }\n        const { shell, commands } = app;\n        const icon = new LabIcon({\n            name: 'run-and-reload:play-in-file-icon',\n            svgstr: playInFileIconStr\n        });\n        const icon2 = new LabIcon({\n            name: 'run-and-reload:fastforward-in-file-icon',\n            svgstr: playInFileIconStr\n        });\n        function commandExecutionFunction(withRestart) {\n            async function executeCommand() {\n                // Get currently selected widget\n                const currentWidget = shell.currentWidget;\n                // If current widget is a notebook then we can run all cells\n                // If not, then this command does not make sense and should not be callable actually\n                if (!(currentWidget instanceof NotebookPanel)) {\n                    return;\n                }\n                function widgetShouldReload(widget) {\n                    const context = manager.contextForWidget(widget);\n                    return context === null || context === void 0 ? void 0 : context.path.endsWith('.pdf');\n                }\n                // Get all attached widgets in the shell\n                const currentWidgets = toArray(shell.widgets());\n                // Obtain the list of widgets that might need to be reloaded after the notebook is finished\n                const widgetsToReload = currentWidgets.filter(widgetShouldReload);\n                const contextsToReload = widgetsToReload.map(widget => manager.contextForWidget(widget));\n                // Connect the openOrReveal function to the fileChanged signal of the relevant widgets\n                contextsToReload.forEach(context => {\n                    context === null || context === void 0 ? void 0 : context.fileChanged.connect((context, model) => {\n                        manager.openOrReveal(context.path);\n                    });\n                });\n                // If current widget is a notebook then we can run all cells\n                if (currentWidget instanceof NotebookPanel) {\n                    let restarted;\n                    if (withRestart) {\n                        restarted = await commands.execute(CommandIDs.restart, {\n                            activate: false\n                        });\n                    }\n                    else {\n                        restarted = true;\n                    }\n                    // TODO: Add check on result + notification if notebook run was not successfull\n                    if (restarted) {\n                        await NotebookActions.runAll(currentWidget.content, currentWidget.sessionContext);\n                    }\n                    // Loop over all widgets in the shell and revert the relevant ones\n                    for (const context of contextsToReload) {\n                        context === null || context === void 0 ? void 0 : context.revert();\n                    }\n                }\n            }\n            return executeCommand;\n        }\n        commands.addCommand(CommandIDs.runAndReloadAll, {\n            label: 'Run All Cells and Reload PDFs',\n            caption: 'Run all the cells of the notebook and then reload static content that has changed (e.g. PDF).',\n            icon: args => (args['ignoreIcon'] ? undefined : icon),\n            isEnabled: () => shell.currentWidget instanceof NotebookPanel,\n            execute: commandExecutionFunction(false)\n        });\n        commands.addCommand(CommandIDs.restartRunAndReloadAll, {\n            label: 'Restart Kernel, Run All Cells and Reload PDFs',\n            caption: 'Restart the kernel, run all the cells of the notebook and then reload static content that has changed (e.g. PDF).',\n            icon: args => (args['ignoreIcon'] ? undefined : icon2),\n            isEnabled: () => shell.currentWidget instanceof NotebookPanel,\n            execute: commandExecutionFunction(true)\n        });\n        // Add the command to the palette\n        if (palette) {\n            palette.addItem({\n                command: CommandIDs.runAndReloadAll,\n                args: { ignoreIcon: true },\n                category: PALETTE_CATEGORY\n            });\n            palette.addItem({\n                command: CommandIDs.restartRunAndReloadAll,\n                args: { ignoreIcon: true },\n                category: PALETTE_CATEGORY\n            });\n        }\n    }\n};\nexport default plugin;\n","export default \"<svg fill=\\\"var(--jp-icon-contrast-color0)\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"  viewBox=\\\"0 0 30 30\\\" width=\\\"210px\\\" height=\\\"210px\\\">\\n<path d=\\\"M24.707,8.793l-6.5-6.5C18.019,2.105,17.765,2,17.5,2H7C5.895,2,5,2.895,5,4v22c0,1.105,0.895,2,2,2h16c1.105,0,2-0.895,2-2V9.5C25,9.235,24.895,8.981,24.707,8.793z M18,10c-0.552,0-1-0.448-1-1V3.904L23.096,10H18z\\\"/>\\n<polygon points=\\\"10,12 10,24 21,18\\\" style=\\\"fill:var(--jp-toolbar-background);stroke:var(--jp-toolbar-background);stroke-width:1;stroke-linejoin:round\\\" />\\n</svg>\";"],"names":[],"sourceRoot":""}