# Generated by Django 3.1.6 on 2021-06-04 16:58

from decimal import Decimal
from django.db import migrations, models
import localflavor.generic.models
from django.utils import timezone
#from apps.address.models import BankAccount


def address_bankaccount_to_payment_bankcard(apps, schema):
    """
    card_type -> card_type
    owner -> Name
    iban -> number
    user -> user
    deleted -> X
    """
    BankAccount = apps.get_model('address', 'BankAccount')
    Bankcard = apps.get_model('payment', 'Bankcard')
    UserAddress = apps.get_model('address', 'UserAddress')

    for bank_account in BankAccount.objects.all():
        iban = bank_account.iban
        bankcard, _ = Bankcard.objects.update_or_create(
            number=iban,
            user=bank_account.user,
            defaults={
                'card_type': bank_account.card_type,
                'name': bank_account.owner,
            }
        )
    UserAddress.objects.all().update(default_bank_account=None)


def bankcard_reverse(apps, schema):
    # Not uset actually
    Bankcard = apps.get_model('payment', 'Bankcard')
    UserAddress = apps.get_model('address', 'UserAddress')
    User = apps.get_model('user', 'User')

    for bankcard in Bankcard.objects.all():
        iban = bankcard.number
        user = User.objects.get(id=bankcard.user_id)
        bank_account, _ = BankAccount.objects.update_or_create(
            iban=iban,
            user_id=user.id,
            defaults={
                'card_type': bankcard.card_type,
                #'user_id': bankcard.user.id,
                'owner': bankcard.name,
                'deleted': False,
            }
        )
    UserAddress.objects.all().update(default_bank_account_id=None)
    Bankcard.objects.filter(expiry_date__isnull=True).update(
        expiry_date=timezone.datetime(3000, 12, 31, 0, 0)
    )
    #Bankcard.objects.all().delete()


def provider_to_sourcetype(apps, schema):
    """
    cash = Bar / EC
    Der Fahrer hat ein Gerät für die Kartenzahlung dabei. 

    sepa = SEPA
    SEPA Bankeinzug (Lastschrift).

    transfer = Vorkasse
    Vorkasse mittels Überweisung. Lieferung erfolgt zum nächstmöglichen Termin nach Zahlungseingang. 

    account = Überweisung
    Rechnung mittels Überweisung nach Lieferung.
    """
    SourceType = apps.get_model('payment', 'SourceType')
    source_types = [
        (1, 'cash', 'Bar / EC', 'Der Fahrer hat ein Gerät für die Kartenzahlung dabei.', False, False),
        (2, 'sepa', 'SEPA', 'SEPA Bankeinzug (Lastschrift).', True, True),
        (3, 'transfer', 'Vorkasse', 'Vorkasse mittels Überweisung. Lieferung erfolgt zum nächstmöglichen Termin nach Zahlungseingang.', False, False),
        (4, 'account', 'Überweisung', 'Rechnung mittels Überweisung nach Lieferung.', False, True),
    ]
    SourceType.objects.all().update(enabled=False)

    for display_order, code, name, description, bankcard_needed, company_only in source_types:
        SourceType.objects.update_or_create(
            code=code,
            defaults={
                'name': name,
                'description': description,
                'display_order': display_order,
                'bankcard_needed': bankcard_needed,
                'company_only': company_only,
                'enabled': True,
            }
        )


class Migration(migrations.Migration):

    dependencies = [
        ('payment', '0009_delete_bankaccount'),
        ('address', '0012_auto_20210104_1208'),
    ]

    operations = [
        migrations.AddField(
            model_name='sourcetype',
            name='display_order',
            field=models.SmallIntegerField(default=0, verbose_name='Display order'),
        ),
        migrations.AlterModelOptions(
            name='sourcetype',
            options={'ordering': ['display_order']},
        ),
        migrations.AddField(
            model_name='sourcetype',
            name='minimum_order_value',
            field=models.DecimalField(decimal_places=2, default=Decimal('30.00'), max_digits=12, verbose_name='Amount Allocated'),
        ),
        migrations.AddField(
            model_name='sourcetype',
            name='description',
            field=models.TextField(blank=True, verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='bankcard',
            name='expiry_date',
            field=models.DateField(blank=True, null=True, verbose_name='Expiry Date'),
        ),
        migrations.AlterField(
            model_name='bankcard',
            name='number',
            field=localflavor.generic.models.IBANField(include_countries=None, max_length=34, use_nordea_extensions=False, verbose_name='IBAN'),
        ),
        migrations.AddField(
            model_name='sourcetype',
            name='bankcard_needed',
            field=models.BooleanField(default=False, help_text='Customer needs to include a bankcard during checkout', verbose_name='Customer bankcard needed'),
        ),
        migrations.AddField(
            model_name='sourcetype',
            name='company_only',
            field=models.BooleanField(default=True, help_text='Only companies can use this provider', verbose_name='Only for companies'),
        ),
        migrations.AddField(
            model_name='sourcetype',
            name='enabled',
            field=models.BooleanField(default=True, help_text='Enable or deactivate this provider', verbose_name='Active'),
        ),
        migrations.AlterModelOptions(
            name='sourcetype',
            options={'ordering': ['-enabled', 'display_order']},
        ),
        migrations.AlterField(
            model_name='sourcetype',
            name='minimum_order_value',
            field=models.DecimalField(decimal_places=2, default=Decimal('30.00'), max_digits=12, verbose_name='Minimum order value'),
        ),
        migrations.RunPython(address_bankaccount_to_payment_bankcard, migrations.RunPython.noop),
        migrations.RunPython(provider_to_sourcetype, migrations.RunPython.noop),
    ]
