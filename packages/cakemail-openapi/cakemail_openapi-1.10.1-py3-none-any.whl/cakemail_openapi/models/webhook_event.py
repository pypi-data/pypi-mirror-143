# coding: utf-8

"""
    Cakemail API

    The Cakemail API exposes multiple APIs including Authentication, Marketing, Contact, Transactional, Analytic, Content, Account and Partner.  # noqa: E501

    The version of the OpenAPI document: 1.6.4
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from cakemail_openapi.configuration import Configuration


class WebhookEvent(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    USER_LOGGEDIN = "User.LoggedIn"
    EMAIL_SENT = "Email.Sent"
    USER_CREATED = "User.Created"
    USER_UPDATED = "User.Updated"
    USER_DELETED = "User.Deleted"
    ACCOUNT_CREATED = "Account.Created"
    ACCOUNT_UPDATED = "Account.Updated"
    ACCOUNT_CONFIRMED = "Account.Confirmed"
    ACCOUNT_DELETED = "Account.Deleted"
    LIST_CREATED = "List.Created"
    LIST_UPDATED = "List.Updated"
    CONTACT_ADDED = "Contact.Added"
    CONTACT_UPDATED = "Contact.Updated"
    CONTACT_UNSUBSCRIBED = "Contact.Unsubscribed"
    CAMPAIGN_CREATED = "Campaign.Created"
    CAMPAIGN_UPDATED = "Campaign.Updated"
    CAMPAIGN_SCHEDULED = "Campaign.Scheduled"
    CAMPAIGN_CANCELED = "Campaign.Canceled"
    CAMPAIGN_SUSPENDED = "Campaign.Suspended"
    CAMPAIGN_UNSCHEDULED = "Campaign.Unscheduled"
    CAMPAIGN_RESUMED = "Campaign.Resumed"

    allowable_values = [USER_LOGGEDIN, EMAIL_SENT, USER_CREATED, USER_UPDATED, USER_DELETED, ACCOUNT_CREATED, ACCOUNT_UPDATED, ACCOUNT_CONFIRMED, ACCOUNT_DELETED, LIST_CREATED, LIST_UPDATED, CONTACT_ADDED, CONTACT_UPDATED, CONTACT_UNSUBSCRIBED, CAMPAIGN_CREATED, CAMPAIGN_UPDATED, CAMPAIGN_SCHEDULED, CAMPAIGN_CANCELED, CAMPAIGN_SUSPENDED, CAMPAIGN_UNSCHEDULED, CAMPAIGN_RESUMED]  # noqa: E501

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
    }

    attribute_map = {
    }

    def __init__(self, local_vars_configuration=None):  # noqa: E501
        """WebhookEvent - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebhookEvent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WebhookEvent):
            return True

        return self.to_dict() != other.to_dict()
