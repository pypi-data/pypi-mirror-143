# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['starknet_devnet', 'starknet_devnet.postman']

package_data = \
{'': ['*']}

install_requires = \
['Flask[async]>=2.0.2,<3.0.0',
 'cairo-lang==0.8.0',
 'dill>=0.3.4,<0.4.0',
 'flask-cors>=3.0.10,<4.0.0']

entry_points = \
{'console_scripts': ['starknet-devnet = starknet_devnet.server:main']}

setup_kwargs = {
    'name': 'starknet-devnet',
    'version': '0.1.19',
    'description': 'A local testnet for Starknet',
    'long_description': '## Introduction\nA Flask wrapper of Starknet state. Similar in purpose to Ganache.\n\nAims to mimic Starknet\'s Alpha testnet, but with simplified functionality.\n\n## Contents\n- [Install](#install)\n- [Disclaimer](#disclaimer)\n- [Run](#run)\n- [Interaction](#interaction)\n- [Dumping and Loading](#dumping)\n- [Hardhat integration](#hardhat-integration)\n- [L1-L2 Postman communication](#postman-integration)\n- [Block explorer](#block-explorer)\n- [Development](#development)\n\n## Install\n```text\npip install starknet-devnet\n```\n\n### Requirements\nWorks with Python versions <=3.8.9.\n\nOn Ubuntu/Debian, first run:\n```text\nsudo apt install -y libgmp3-dev\n```\n\nOn Mac, you can use `brew`:\n```text\nbrew install gmp\n```\n\n## Disclaimer\n- Devnet should not be used as a replacement for Alpha testnet. After testing on Devnet, be sure to test on testnet!\n- Specifying a block by its hash/number is not supported. All interaction is done with the latest block.\n- Read more in [interaction](#interaction-api).\n\n## Run\nInstalling the package adds the `starknet-devnet` command.\n```text\nusage: starknet-devnet [-h] [-v] [--host HOST] [--port PORT]\n\nRun a local instance of Starknet Devnet\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -v, --version         Print the version\n  --host HOST           Specify the address to listen at; defaults to localhost (use the address the program outputs on start)\n  --port PORT, -p PORT  Specify the port to listen at; defaults to 5000\n  --load-path LOAD_PATH\n                        Specify the path from which the state is loaded on\n                        startup\n  --dump-path DUMP_PATH\n                        Specify the path to dump to\n  --dump-on DUMP_ON     Specify when to dump; can dump on: exit, transaction\n```\n\n### Run with Docker\nDevnet is available as a Docker container ([shardlabs/starknet-devnet](https://hub.docker.com/repository/docker/shardlabs/starknet-devnet)):\n```text\ndocker pull shardlabs/starknet-devnet\n```\n\nThe server inside the container listens to the port 5000, which you need to publish to a desired `<PORT>` on your host machine:\n```text\ndocker run -p [HOST:]<PORT>:5000 shardlabs/starknet-devnet\n```\n\nE.g. if you want to use your host machine\'s `127.0.0.1:5000`, you need to run:\n```text\ndocker run -p 127.0.0.1:5000:5000 shardlabs/starknet-devnet\n```\n\nYou may ignore any address-related output logged on container startup (e.g. `Running on all addresses` or `Running on http://172.17.0.2:5000`). What you will use is what you specified with the `-p` argument.\n\nIf you don\'t specify the `HOST` part, the server will indeed be available on all of your host machine\'s addresses (localhost, local network IP, etc.), which may present a security issue if you don\'t want anyone from the local network to access your Devnet instance.\n\n## Interaction\n- Interact with Devnet as you would with the official Starknet [Alpha testnet](https://www.cairo-lang.org/docs/hello_starknet/amm.html?highlight=alpha#interaction-examples).\n- The exact underlying API is not exposed for the same reason Alpha testnet does not expose it.\n- To use Devnet with Starknet CLI, provide Devnet\'s URL to the `--gateway_url` and `--feeder_gateway_url` options of Starknet CLI commands.\n- The following Starknet CLI commands are supported:\n  - `call`\n  - `deploy`\n  - `get_block`\n  - `get_code`\n  - `get_full_contract`\n  - `get_state_update`\n  - `get_storage_at`\n  - `get_transaction_receipt`\n  - `get_transaction_trace`\n  - `get_transaction`\n  - `invoke`\n  - `tx_status`\n- The following Starknet CLI commands are **not** supported:\n  - `get_contract_addresses`\n  - `estimate_fee` (currently always returning 0)\n  - `get_transaction_trace`\n\n## Hardhat integration\n- If you\'re using [the Hardhat plugin](https://github.com/Shard-Labs/starknet-hardhat-plugin), see [here](https://github.com/Shard-Labs/starknet-hardhat-plugin#testing-network) on how to edit its config file to integrate Devnet.\n\n## Postman integration\nPostman is a Starknet utility that allows testing L1 <> L2 interactions. To utilize functionality, you can use [`starknet-hardhat-plugin`](https://github.com/Shard-Labs/starknet-hardhat-plugin), as witnessed in [this example](https://github.com/Shard-Labs/starknet-hardhat-example/blob/master/test/postman.test.ts). Or you can directly interact with the two Postman-specific endpoints:\n\n- Load a `StarknetMockMessaging` contract. The `address` in the body is optional. If provided, the `StarknetMockMessaging` contract will be fetched from that address, otherwise a new one will be deployed:\n  - POST "/postman/load_l1_messaging_contract"\n  - body: `{ "networkUrl":"http://localhost:5005", "address":"0x83D76591560d9CD02CE16c060c92118d19F996b3" }`\n\n- Flush. This will go through the new enqueued messages sent from L1 and send them to L2. This has to be done manually for L1 -> L2, but for L2 -> L1, it is done automatically:\n  - POST "/postman/flush"\n  - no body\n\nThis method of L1 <> L2 communication testing differs from Starknet Alpha networks. Taking the [L1L2Example.sol](https://www.cairo-lang.org/docs/_static/L1L2Example.sol) contract in the [starknet documentation](https://www.cairo-lang.org/docs/hello_starknet/l1l2.html):\n```\nconstructor(IStarknetCore starknetCore_) public {\n        starknetCore = starknetCore_;\n}\n```\nThe constructor takes an `IStarknetCore` contract as argument, however for devnet L1 <> L2 communication testing, this will have to be replaced with the [MockStarknetMessaging.sol](https://github.com/starkware-libs/cairo-lang/blob/master/src/starkware/starknet/testing/MockStarknetMessaging.sol) contract:\n```\nconstructor(MockStarknetMessaging mockStarknetMessaging_) public {\n    starknetCore = mockStarknetMessaging_;\n}\n```\n\n## Dumping\nTo preserve your Devnet instance for future use, there are several options:\n\n- Dumping on exit (handles Ctrl+C, i.e. SIGINT, doesn\'t handle SIGKILL):\n```\nstarknet-devnet --dump-on exit --dump-path <PATH>\n```\n\n- Dumping after each transaction (done in background, doesn\'t block):\n```\nstarknet-devnet --dump-on transaction --dump-path <PATH>\n```\n\n- Dumping on request (replace `<HOST>`, `<PORT>` and `<PATH>` with your own):\n```\ncurl -X POST http://<HOST>:<PORT>/dump -d \'{ "path": <PATH> }\' -H "Content-Type: application/json"\n```\n\n### Loading\nTo load a preserved Devnet instance, run:\n```\nstarknet-devnet --load-path <PATH>\n```\n\n### Enabling dumping and loading with Docker\nTo enable dumping and loading if running Devnet in a Docker container, you must bind the container path with the path on your host machine.\n\nThis example:\n- Relies on [Docker bind mount](https://docs.docker.com/storage/bind-mounts/); try [Docker volume](https://docs.docker.com/storage/volumes/) instead.\n- Assumes that `/actual/dumpdir` exists. If unsure, use absolute paths.\n- Assumes you are listening on `127.0.0.1:5000`.\n\nIf there is `dump.pkl` inside `/actual/dumpdir`, you can load it with:\n```\ndocker run \\\n  -p 127.0.0.1:5000:5000 \\\n  --mount type=bind,source=/actual/dumpdir,target=/dumpdir \\\n  shardlabs/starknet-devnet \\\n  --load-path /dumpdir/dump.pkl\n```\n\nTo dump to `/actual/dumpdir/dump.pkl` on Devnet shutdown, run:\n```\ndocker run \\\n  -p 127.0.0.1:5000:5000 \\\n  --mount type=bind,source=/actual/dumpdir,target=/dumpdir \\\n  shardlabs/starknet-devnet \\\n  --dump-on exit --dump-path /dumpdir/dump.pkl\n```\n\n## Block explorer\nTo see how to setup a local block explorer (Voyager) check this [post](https://twitter.com/kasiazerosiedem/status/1501492129264123911).\n\n## Development\nIf you\'re a developer willing to contribute, be sure to have installed [Poetry](https://pypi.org/project/poetry/).\n\n### Development - Run\n```text\npoetry run starknet-devnet\n```\n\n### Development - Test\nWhen running tests locally, do it from the project root.\n\nSetup an example project by running:\n```text\n./scripts/setup_example.sh\n```\n\nTo see if Devnet can interact with starknet CLI commands, run:\n```text\npython3 -m test.test_cli\npython3 -m test.test_cli_auth\n```\n\nTo see if Devnet can interact with the Hardhat plugin, set environment variables `HARDHAT_CONFIG_FILE` and `TEST_FILE` and run:\n```text\n./test/test_plugin.sh\n```\n\nOther tests in the `test` directory use `pytest`, so run them with:\n```text\npoetry run pytest <TEST_FILE>\n```\n\n### Development - Build\nYou don\'t need to build anything to be able to run locally, but if you need the `*.whl` or `*.tar.gz` artifacts, run\n```text\npoetry build\n```\n',
    'author': 'FabijanC',
    'author_email': 'fabijan.corak@gmail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/Shard-Labs/starknet-devnet',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.7,<4.0',
}


setup(**setup_kwargs)
