# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities
from ._enums import *

__all__ = [
    'ScheduleArgs',
]

@pulumi.input_type
class ScheduleArgs:
    def __init__(__self__, *,
                 crontab_spec: Optional[pulumi.Input[str]] = None,
                 prefix: Optional[pulumi.Input[str]] = None,
                 retention_count: Optional[pulumi.Input[int]] = None):
        """
        A snapshot schedule.
        :param pulumi.Input[str] crontab_spec: A crontab-like specification that the schedule uses to take snapshots.
        :param pulumi.Input[str] prefix: A list of snapshot names created in this schedule.
        :param pulumi.Input[int] retention_count: The maximum number of snapshots to retain in this schedule.
        """
        if crontab_spec is not None:
            pulumi.set(__self__, "crontab_spec", crontab_spec)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if retention_count is not None:
            pulumi.set(__self__, "retention_count", retention_count)

    @property
    @pulumi.getter(name="crontabSpec")
    def crontab_spec(self) -> Optional[pulumi.Input[str]]:
        """
        A crontab-like specification that the schedule uses to take snapshots.
        """
        return pulumi.get(self, "crontab_spec")

    @crontab_spec.setter
    def crontab_spec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "crontab_spec", value)

    @property
    @pulumi.getter
    def prefix(self) -> Optional[pulumi.Input[str]]:
        """
        A list of snapshot names created in this schedule.
        """
        return pulumi.get(self, "prefix")

    @prefix.setter
    def prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "prefix", value)

    @property
    @pulumi.getter(name="retentionCount")
    def retention_count(self) -> Optional[pulumi.Input[int]]:
        """
        The maximum number of snapshots to retain in this schedule.
        """
        return pulumi.get(self, "retention_count")

    @retention_count.setter
    def retention_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retention_count", value)


