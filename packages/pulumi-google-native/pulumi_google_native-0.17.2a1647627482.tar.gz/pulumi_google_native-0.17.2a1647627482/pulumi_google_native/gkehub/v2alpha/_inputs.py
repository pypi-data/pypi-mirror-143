# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from ... import _utilities

__all__ = [
    'FeatureConfigRefArgs',
    'FeatureConfigStateArgs',
    'FeatureSpecArgs',
    'ResourceStateArgs',
]

@pulumi.input_type
class FeatureConfigRefArgs:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input[str]] = None):
        """
        Information of the FeatureConfig applied on the MembershipFeature.
        :param pulumi.Input[str] config: Input only. Resource name of FeatureConfig, in the format: `projects/{project}/locations/global/featureConfigs/{feature_config}`.
        """
        if config is not None:
            pulumi.set(__self__, "config", config)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input[str]]:
        """
        Input only. Resource name of FeatureConfig, in the format: `projects/{project}/locations/global/featureConfigs/{feature_config}`.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config", value)


@pulumi.input_type
class FeatureConfigStateArgs:
    def __init__(__self__):
        """
        FeatureConfigState describes the state of a FeatureConfig resource.
        """
        pass


@pulumi.input_type
class FeatureSpecArgs:
    def __init__(__self__):
        """
        FeatureSpec contains user input per-feature spec information.
        """
        pass


@pulumi.input_type
class ResourceStateArgs:
    def __init__(__self__):
        """
        ResourceState describes the state of a MembershipFeature *resource* in the GkeHub API. See `FeatureState` for the "running state" of the MembershipFeature.
        """
        pass


