"use strict";(self.webpackChunk_JUPYTERLAB_CORE_OUTPUT=self.webpackChunk_JUPYTERLAB_CORE_OUTPUT||[]).push([[5912],{15912:(e,n,t)=>{t.r(n),t.d(n,{addCommands:()=>y,default:()=>f});var a,r=t(61759),s=t(23982),i=t(51373),o=t(26944),m=t(22412),c=t(77248),l=t(36779),d=t(51738),h=t(34615),u=t(85534),g=t(81734),_=t(28877);!function(e){e.createNew="terminal:create-new",e.open="terminal:open",e.refresh="terminal:refresh",e.increaseFont="terminal:increase-font",e.decreaseFont="terminal:decrease-font",e.setTheme="terminal:set-theme",e.shutdown="terminal:shut-down"}(a||(a={}));const w={activate:function(e,n,t,r,i,o,m,c,l){const d=t.load("jupyterlab"),{serviceManager:h,commands:f}=e,T=d.__("Terminal"),b=new s.WidgetTracker({namespace:"terminal"});if(!h.terminals.isAvailable())return console.warn("Disabling terminals plugin because they are not available on the server"),b;o&&o.restore(b,{command:a.createNew,args:e=>({name:e.content.session.name}),name:e=>e.content.session.name});const I={};function C(e){Object.keys(e.composite).forEach((n=>{I[n]=e.composite[n]}))}function M(){b.forEach((e=>function(e){const n=e.content;n&&Object.keys(I).forEach((e=>{n.setOption(e,I[e])}))}(e)))}if(n.load(w.id).then((e=>{C(e),M(),e.changed.connect((()=>{C(e),M()}))})).catch(p.showErrorMessage),null==c||c.themeChanged.connect(((e,n)=>{b.forEach((e=>{const n=e.content;"inherit"===n.getOption("theme")&&n.setOption("theme","inherit")}))})),y(e,b,n,t,I),m){const e=new _.Menu({commands:f});e.title.label=d._p("menu","Terminal Theme"),e.addItem({command:a.setTheme,args:{theme:"inherit",displayName:d.__("Inherit"),isPalette:!1}}),e.addItem({command:a.setTheme,args:{theme:"light",displayName:d.__("Light"),isPalette:!1}}),e.addItem({command:a.setTheme,args:{theme:"dark",displayName:d.__("Dark"),isPalette:!1}}),m.settingsMenu.addGroup([{command:a.increaseFont},{command:a.decreaseFont},{type:"submenu",submenu:e}],40),m.fileMenu.newMenu.addItem({command:a.createNew,rank:20}),m.fileMenu.closeAndCleaners.add({id:a.shutdown,isEnabled:e=>null!==b.currentWidget&&b.has(e)})}return r&&([a.createNew,a.refresh,a.increaseFont,a.decreaseFont].forEach((e=>{r.addItem({command:e,category:T,args:{isPalette:!0}})})),r.addItem({command:a.setTheme,category:T,args:{theme:"inherit",displayName:d.__("Inherit"),isPalette:!0}}),r.addItem({command:a.setTheme,category:T,args:{theme:"light",displayName:d.__("Light"),isPalette:!0}}),r.addItem({command:a.setTheme,category:T,args:{theme:"dark",displayName:d.__("Dark"),isPalette:!0}})),i&&i.add({command:a.createNew,category:d.__("Other"),rank:0}),l&&function(e,n,t){const a=t.load("jupyterlab"),r=n.serviceManager.terminals;e.add({name:a.__("Terminals"),running:()=>(0,g.toArray)(r.running()).map((e=>new s(e))),shutdownAll:()=>r.shutdownAll(),refreshRunning:()=>r.refreshRunning(),runningChanged:r.runningChanged,shutdownLabel:a.__("Shut Down"),shutdownAllLabel:a.__("Shut Down All"),shutdownAllConfirmationText:a.__("Are you sure you want to permanently shut down all running terminals?")});class s{constructor(e){this._model=e}open(){n.commands.execute("terminal:open",{name:this._model.name})}icon(){return u.terminalIcon}label(){return`terminals/${this._model.name}`}shutdown(){return r.shutdown(this._model.name)}}}(l,e,t),b},id:"@jupyterlab/terminal-extension:plugin",provides:d.ITerminalTracker,requires:[l.ISettingRegistry,h.ITranslator],optional:[s.ICommandPalette,i.ILauncher,r.ILayoutRestorer,o.IMainMenu,s.IThemeManager,m.IRunningSessionManagers],autoStart:!0},f=w;function y(e,n,t,r,i){const o=r.load("jupyterlab"),{commands:m,serviceManager:l}=e;m.addCommand(a.createNew,{label:e=>e.isPalette?o.__("New Terminal"):o.__("Terminal"),caption:o.__("Start a new terminal session"),icon:e=>e.isPalette?void 0:u.terminalIcon,execute:async t=>{let a;try{a=(await p.ensureWidget()).Terminal}catch(e){return void p.showErrorMessage(e)}const o=t.name;let m;m=o?(await c.TerminalAPI.listRunning()).map((e=>e.name)).includes(o)?l.terminals.connectTo({model:{name:o}}):await l.terminals.startNew({name:o}):await l.terminals.startNew();const d=new a(m,i,r);d.title.icon=u.terminalIcon,d.title.label="...";const h=new s.MainAreaWidget({content:d});return e.shell.add(h),n.add(h),e.shell.activateById(h.id),h}}),m.addCommand(a.open,{execute:t=>{const r=t.name,s=n.find((e=>e.content.session.name===r||!1));if(!s)return m.execute(a.createNew,{name:r});e.shell.activateById(s.id)}}),m.addCommand(a.refresh,{label:o.__("Refresh Terminal"),caption:o.__("Refresh the current terminal session"),execute:async()=>{const t=n.currentWidget;if(t){e.shell.activateById(t.id);try{await t.content.refresh(),t&&t.content.activate()}catch(e){p.showErrorMessage(e)}}},isEnabled:()=>null!==n.currentWidget}),m.addCommand(a.shutdown,{label:o.__("Shutdown Terminal"),execute:()=>{const e=n.currentWidget;if(e)return e.content.session.shutdown()},isEnabled:()=>null!==n.currentWidget}),m.addCommand(a.increaseFont,{label:o.__("Increase Terminal Font Size"),execute:async()=>{const{fontSize:e}=i;if(e&&e<72)try{await t.set(w.id,"fontSize",e+1)}catch(e){p.showErrorMessage(e)}}}),m.addCommand(a.decreaseFont,{label:o.__("Decrease Terminal Font Size"),execute:async()=>{const{fontSize:e}=i;if(e&&e>9)try{await t.set(w.id,"fontSize",e-1)}catch(e){p.showErrorMessage(e)}}});const d={inherit:o.__("Inherit"),light:o.__("Light"),dark:o.__("Dark")};m.addCommand(a.setTheme,{label:e=>{const n=e.theme,t=n in d?d[n]:o.__(n[0].toUpperCase()+n.slice(1));return e.isPalette?o.__("Use Terminal Theme: %1",t):t},caption:o.__("Set the terminal theme"),isToggled:e=>{const{theme:n}=i;return e.theme===n},execute:async e=>{const n=e.theme;try{await t.set(w.id,"theme",n),m.notifyCommandChanged(a.setTheme)}catch(e){console.log(e),p.showErrorMessage(e)}}})}var p;!function(e){e.ensureWidget=function(){return e.widgetReady||(e.widgetReady=Promise.all([t.e(753),t.e(4547),t.e(2404),t.e(2480)]).then(t.bind(t,40753))),e.widgetReady},e.showErrorMessage=function(e){console.error(`Failed to configure ${w.id}: ${e.message}`)}}(p||(p={}))}}]);