# AUTOGENERATED! DO NOT EDIT! File to edit: notebooks/status.ipynb (unless otherwise specified).

__all__ = [
    "tax_benefit_system",
    "config",
    "cache",
    "tc",
    "status_cache",
    "status_simu",
    "status_version_of",
    "get_commit_hash",
    "status_version_projet",
    "get_status",
]

# Cell

import subprocess
import unittest

from fastapi import HTTPException
from openfisca_france import FranceTaxBenefitSystem
from starlette.status import HTTP_503_SERVICE_UNAVAILABLE

from .cache import Cache
from .config import Configuration
from .csg_simu import compute_reform
from .schema import ReformeSocioFiscale, Status

# plf_2022 = Plf2022(FranceTaxBenefitSystem())
tax_benefit_system = FranceTaxBenefitSystem()

config = Configuration()
cache = Cache()
tc = unittest.TestCase()

# Cell


def status_cache():
    if not cache.is_available():
        raise HTTPException(
            status_code=HTTP_503_SERVICE_UNAVAILABLE,
            detail="Cache not available",
        )
    else:
        return True


# Cell


def status_simu():

    reform_base = ReformeSocioFiscale(
        base="2021",
        amendement={},
        output_variables=["csg"],
        quantile_nb=0,
    )
    res = compute_reform(reform_base, "2021")
    if res[0].state_budget.get("csg") is None:
        raise HTTPException(
            status_code=HTTP_503_SERVICE_UNAVAILABLE,
            detail="API CSG not available",
        )
    else:
        return True


# Cell


def status_version_of():
    country_package_metadata = tax_benefit_system.get_package_metadata()
    country_package_name = country_package_metadata["name"]
    country_package_version = country_package_metadata["version"]
    return [country_package_name, country_package_version]


# Cell


def get_commit_hash():
    result = subprocess.run(
        ["git", "rev-parse", "--short", "HEAD"],
        stdout=subprocess.PIPE,
        stderr=subprocess.DEVNULL,
        check=False,
    )
    return result.stdout.decode("utf-8").rstrip()


# Cell


def status_version_projet():
    version = get_commit_hash()
    return version


# Cell


def get_status():

    return Status(
        cache=status_cache(),
        simulations=status_simu(),
        version_openfisca=status_version_of(),
        last_commit=status_version_projet(),
    )
