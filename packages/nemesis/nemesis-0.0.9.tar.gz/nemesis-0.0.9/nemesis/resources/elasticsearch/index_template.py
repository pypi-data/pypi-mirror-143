#!/usr/bin/env python
# -*- coding: utf-8 -*-

import dacite
from dataclasses import dataclass, field
from typing import Optional
from elasticsearch import NotFoundError

from nemesis.exceptions import MultipleObjectsReturned
from nemesis.resources import enforce_types, BaseResource
from nemesis.resources.elasticsearch.alias import Alias
from nemesis.resources.elasticsearch.index import IndexSettings

from nemesis.schemas.elasticsearch.index_template import IndexTemplateSchema


@enforce_types
@dataclass(frozen=True)
class Template(BaseResource):
    """
    Template object for IndexTemplate

    :param aliases: Aliases for the index.
    :type aliases: Alias, optional

    :param mappings: Mapping for fields in the index.
    :type mappings: dict, optional

    :param settings: Configuration options for the index
    :type settings: IndexSettings, optional
    """

    settings: Optional[IndexSettings] = None
    mappings: Optional[dict] = None
    aliases: Optional[Alias] = None


@enforce_types
@dataclass(repr=False, frozen=True)
class IndexTemplate(BaseResource):
    """
    Manage `Index Template <https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-put-template.html>`__

    :param name: Name of the index you wish to interact with.
    :type name: str

    :param index_patterns: Array of wildcard (*) expressions used to match the names of data streams and indices during creation.
    :type index_patterns: list

    :param template: Template to be applied. It may optionally include an aliases, mappings, or settings configuration.
    :type template: Template

    :param version: Version number used to manage index templates externally. This number is not automatically generated by Elasticsearch
    :type version: int, optional

    :param priority: Priority to determine index template precedence when a new data stream or index is created. The index template with the highest priority is chosen. If no priority is specified the template is treated as though it is of priority 0 (lowest priority). This number is not automatically generated by Elasticsearch.
    :type priority: int, optional

    :param meta: Optional user metadata about the index template. May have any contents. This map is not automatically generated by Elasticsearch.
    :type meta: dict, optional

    :param composed_of: An ordered list of component template names. Component templates are merged in the order specified, meaning that the last component template specified has the highest precedence. See Composing multiple component templates for an example.
    :type composed_of: list, optional
    """

    name: str
    index_patterns: list
    template: Template
    version: Optional[int] = None
    priority: Optional[int] = None
    composed_of: Optional[list] = None
    meta: Optional[dict] = None

    @property
    def id(self):
        return self.name

    def asdict(self):
        """
        The "name" field isn't part of the actual body sent to Elasticsearch.
        But it's nice to have on the object we are dealing with.
        """
        d = super().asdict()
        d.pop("name")
        return d

    @classmethod
    def get(cls, client, name):
        """
        Get an index template from Elasticsearch

        :param client: Elasticsearch Client
        :type client: :py:mod:`Elasticsearch`

        :param name: Index template name
        :type name: str
        """
        try:
            rt = client.indices.get_index_template(name=name, flat_settings=False)
        except NotFoundError:
            return None
        data = rt["index_templates"]
        ret = []

        schema = IndexTemplateSchema()
        for item in data:
            result = schema.load(item)
            template = dacite.from_dict(data_class=cls, data=result)
            ret.append(template)
        if len(ret) > 1:
            raise MultipleObjectsReturned
        else:
            return ret[0]

    def create(self, client):
        """
        Create an index template in Elasticsearch

        :param client: Elasticsearch Client
        :type client: :py:mod:`Elasticsearch`

        """
        try:
            return client.indices.put_index_template(
                name=self.name, body=self.asdict(), create=True
            )
        except Exception as e:
            raise e

    def update(self, client):
        """
        Update an index template in Elasticsearch

        :param client: Elasticsearch Client
        :type client: :py:mod:`Elasticsearch`

        """
        try:
            return client.indices.put_index_template(
                name=self.name, body=self.asdict(), create=False
            )
        except Exception as e:
            raise e

    def delete(self, client):
        """
        Delete an index template in Elasticsearch

        :param client: Elasticsearch Client
        :type client: :py:mod:`Elasticsearch`

        """
        try:
            return client.indices.delete_index_template(name=self.name)
        except Exception as e:
            raise e
