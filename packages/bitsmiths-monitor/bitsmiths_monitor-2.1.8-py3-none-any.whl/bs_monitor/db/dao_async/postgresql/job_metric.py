# This file was generated by mettle.genes.db.GenPy3 [ver 2.1] on Thu May 13 10:10:58 2021
#  Target Database = postgresql
#
import asyncio
import copy
import datetime
import uuid
import time
import mettle.lib
import mettle.io
import mettle.db

from bs_monitor.db.tables.job_metric import tJobMetric

from .job_metric_insert import dJobMetricInsert

class dJobMetric:

    def __init__(self, dbcon: mettle.db.IAConnect):
        """
        Constructor.

        :param dbcon: Mettle database connection object.
        """
        self.rec    = tJobMetric()
        self._dbcon = dbcon

    def __enter__(self):
        """
        DAO enter.
        """
        return self

    def __exit__(self, type, value, traceback):
        """
        DAO exit.
        """
        pass

    async def insert_deft(self,
                          jobinst_id: int,
                          type: str,
                          msg: str):
        """
        Insert the record setting all column values.

        :param jobinst_id: int
        :param stamp_tm: datetime.datetime
        :param type: str
        :param msg: str
        """
        self.rec.jobinst_id = jobinst_id
        self.rec.type = type
        self.rec.msg = msg

        await self.insert()

    async def insert(self, irec: tJobMetric = None):
        """
        Insert the record in the database with the record or irec if it is not None.

        :param irec: If not None use this record to insert into the database.
        """
        if irec:
            self.rec._copy_from(irec)

        with dJobMetricInsert(self._dbcon) as _qry:
            await _qry.exec(self.rec)

        if irec:
            irec._copy_from(self.rec)

