# This file was generated by mettlegen.db.GenPy3 [ver 2.0] on Tue Sep 22 18:33:28 2020
#  Target Database = postgresql
#
import copy
import datetime
import uuid
import time
import mettle.lib
import mettle.io
import mettle.db

from bs_monitor.db.tables.batch import tBatch

class dBatchSelectAll:

    def __init__(self, dbcon: mettle.db.IAConnect):
        """
        Constructor.

        :param dbcon: Mettle database connection object.
        """
        self._dbcon   = dbcon
        self._dbstmnt = None
        self.orec     = tBatch()

    def __del__(self):
        """
        Destructor.
        """
        del self._dbstmnt

    def __enter__(self):
        """
        With statement enter.
        """
        return self

    def __exit__(self, type, value, traceback):
        """
        With statement exit.
        """
        self._destroy()

    def _destroy(self):
        if self._dbstmnt == None:
            return

        del self._dbstmnt
        self._dbstmnt = None

    async def fetch(self) -> bool:
        """
        Fetches the next row from the executed query.

        :return: True if a row is retreived.
        """
        if not await self._dbcon.fetch(self._dbstmnt):
            return False

        self.orec.id = self._dbstmnt.result[0]
        self.orec.parent_id = self._dbstmnt.result[1]
        self.orec.name = self._dbstmnt.result[2]
        self.orec.group_id = self._dbstmnt.result[3]
        self.orec.status = self._dbstmnt.result[4]
        self.orec.cycle = self._dbstmnt.result[5]
        self.orec.rundate = self._dbstmnt.result[6]
        self.orec.run_interval = self._dbstmnt.result[7]
        self.orec.run_time = self._dbstmnt.result[8]
        self.orec.ext_data = self._dbstmnt.result[9]
        self.orec.modified_by = self._dbstmnt.result[10]
        self.orec.tm_stamp = self._dbstmnt.result[11]

        return True

    async def fetch_all(self, outList: tBatch.List, clearList: bool = True) -> int:
        """
        Fetch all the rows into the specified list and return the list count.

        :param outList:
        :param clearList:
        :return: Number of rows fetched.
        """
        if clearList:
            outList.clear()

        while await self.fetch():
            outList.append(copy.deepcopy(self.orec))

        return len(outList)

