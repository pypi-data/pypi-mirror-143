[
  {
    "id": 14251,
    "type": "VideoExercise",
    "assignment": null,
    "title": "Hello Python!",
    "sample_code": "",
    "instructions": null,
    "number": 1,
    "sct": "",
    "pre_exercise_code": "",
    "solution": "",
    "hint": null,
    "attachments": null,
    "xp": 50,
    "possible_answers": [],
    "feedbacks": [],
    "question": "",
    "video_link": null,
    "video_hls": null,
    "aspect_ratio": 56.25,
    "projector_key": "course_735_d8fcd4c930027fa4e1c3870c7e7e0ff1"
  },
  {
    "id": 14023,
    "type": "NormalExercise",
    "assignment": "<p>In the Python script on the right, you can type Python code to solve the exercises. If you hit <em>Run Code</em> or <em>Submit Answer</em>, your python script (<code>script.py</code>) is executed and the output is shown in the IPython Shell. <em>Submit Answer</em> checks whether your submission is correct and gives you feedback.</p>\n<p>You can hit <em>Run Code</em> and <em>Submit Answer</em> as often as you want. If you're stuck, you can click <em>Get Hint</em>, and ultimately <em>Get Solution</em>.</p>\n<p>You can also use the IPython Shell interactively by simply typing commands and hitting Enter. When you work in the shell directly, your code will not be checked for correctness so it is a great way to experiment.</p>",
    "title": "The Python Interface",
    "sample_code": "# Example, do not modify!\nprint(5 / 8)\n\n# Print the sum of 7 and 10\n",
    "instructions": "<ul>\n<li>Experiment in the IPython Shell; type <code>5 / 8</code>, for example.</li>\n<li>Add another line of code to the Python script on the top-right (not in the Shell): <code>print(7 + 10)</code>.</li>\n<li>Hit <em>Submit Answer</em> to execute the Python script and receive feedback.</li>\n</ul>",
    "number": 2,
    "sct": "Ex().has_printout(1, not_printed_msg = \"__JINJA__:Have you used `{{sol_call}}` to print out the sum of 7 and 10?\")\nsuccess_msg(\"Great! On to the next one!\")",
    "pre_exercise_code": "",
    "solution": "# Example, do not modify!\nprint(5 / 8)\n\n# Put code below here\nprint(7 + 10)",
    "hint": "<p>Simply add <code>print(7 + 10)</code> in the script on the top-right (not in the Shell) and hit 'Submit Answer'.</p>",
    "attachments": null,
    "xp": 100,
    "possible_answers": [],
    "feedbacks": [],
    "question": ""
  },
  {
    "id": 14024,
    "type": "MultipleChoiceExercise",
    "assignment": "<p>Python is a pretty versatile language. For which applications can you use Python?</p>",
    "title": "When to use Python?",
    "sample_code": "",
    "instructions": null,
    "number": 3,
    "sct": "msg1 = \"Incorrect. Python can do simple and quick calculations, but it is much more than that!\"\nmsg2 = \"Incorrect. There is a very popular framework to build database-driven websites (Django), but Python can do much more.\"\nmsg3 = \"Incorrect. Python is a powerful tool to do data analysis, but you can also use it for other ends.\"\nmsg4 = \"Correct! Python is an extremely versatile language.\"\nEx().has_chosen(4, [msg1, msg2, msg3, msg4])",
    "pre_exercise_code": "",
    "solution": "",
    "hint": "<p>Hugo mentioned in the video that Python can be used to build practically any piece of software.</p>",
    "attachments": null,
    "xp": 50,
    "possible_answers": [
      "You want to do some quick calculations.",
      "For your new business, you want to develop a database-driven website.",
      "Your boss asks you to clean and analyze the results of the latest satisfaction survey.",
      "All of the above."
    ],
    "feedbacks": [],
    "question": ""
  },
  {
    "id": 14025,
    "type": "NormalExercise",
    "assignment": "<p>Something that Hugo didn't mention in his videos is that you can add <strong>comments</strong> to your Python scripts. Comments are important to make sure that you and others can understand what your code is about.</p>\n<p>To add comments to your Python script, you can use the <code>#</code> tag. These comments are not run as Python code, so they will not influence your result. As an example, take the comment in the editor, <code># Division</code>; it is completely ignored during execution.</p>",
    "title": "Any comments?",
    "sample_code": "# Division\nprint(5 / 8)\n\n\nprint(7 + 10)",
    "instructions": "<p>Above the <code>print(7 + 10)</code>, add the comment </p>\n<pre><code># Addition\n</code></pre>",
    "number": 4,
    "sct": "Ex().has_code(\"#\\s*(\\w+)[\\s.!?]*print\\s*\\(\\s*7\", not_typed_msg = \"Make sure to add the comment right before `print(7 + 10)`.\")\nsuccess_msg(\"Great!\")",
    "pre_exercise_code": "",
    "solution": "# Division\nprint(5 / 8)\n\n# Addition\nprint(7 + 10)",
    "hint": "<p>For this exercise you only have to add one line of comments. It won't run as Python code. Add <code># Addition</code> right above <code>print(7 + 10)</code>.</p>",
    "attachments": null,
    "xp": 100,
    "possible_answers": [],
    "feedbacks": [],
    "question": ""
  },
  {
    "id": 14026,
    "type": "NormalExercise",
    "assignment": "<p>Python is perfectly suited to do basic calculations. Apart from addition, subtraction, multiplication and division, there is also support for more advanced operations such as:</p>\n<ul>\n<li>Exponentiation: <code>**</code>. This operator raises the number to its left to the power of the number to its right. For example <code>4**2</code> will give <code>16</code>.</li>\n<li>Modulo: <code>%</code>. This operator returns the remainder of the division of the number to the left by the number on its right. For example <code>18 % 7</code> equals <code>4</code>.</li>\n</ul>\n<p>The code in the script gives some examples.</p>",
    "title": "Python as a calculator",
    "sample_code": "# Addition, subtraction\nprint(5 + 5)\nprint(5 - 5)\n\n# Multiplication, division, modulo, and exponentiation\nprint(3 * 5)\nprint(10 / 2)\nprint(18 % 7)\nprint(4 ** 2)\n\n# How much is your $100 worth after 7 years?\n",
    "instructions": "<p>Suppose you have $100, which you can invest with a 10% return each year. After one year, it's \\(100 \\times 1.1 = 110\\) dollars, and after two years it's \\(100 \\times 1.1 \\times 1.1 = 121\\). Add code to calculate how much money you end up with after 7 years, and print the result.</p>",
    "number": 5,
    "sct": "Ex().has_printout(6, not_printed_msg = \"Have you used `print(100 * 1.1 ** 7)` to print out the result of your calculations?\")\nsuccess_msg(\"Time for another video!\")",
    "pre_exercise_code": "",
    "solution": "# Addition, subtraction\nprint(5 + 5)\nprint(5 - 5)\n\n# Multiplication, division, modulo, and exponentiation\nprint(3 * 5)\nprint(10 / 2)\nprint(18 % 7)\nprint(4 ** 2)\n\n# How much is your $100 worth after 7 years?\nprint(100 * 1.1 ** 7)",
    "hint": "<p>After two years you have \\(100 \\times 1.1 \\times 1.1 = 100 \\times 1.1^2\\). How much do you have after 7 years than? Use <code>*</code> and <code>**</code>.</p>",
    "attachments": null,
    "xp": 100,
    "possible_answers": [],
    "feedbacks": [],
    "question": ""
  },
  {
    "id": 972033,
    "type": "VideoExercise",
    "assignment": null,
    "title": "Variables and Types",
    "sample_code": "",
    "instructions": null,
    "number": 6,
    "sct": "",
    "pre_exercise_code": "",
    "solution": "",
    "hint": null,
    "attachments": null,
    "xp": 50,
    "possible_answers": [],
    "feedbacks": [],
    "question": "",
    "video_link": null,
    "video_hls": null,
    "aspect_ratio": 56.25,
    "projector_key": "course_735_433dcfcfedaee070cbf440491c402e3b"
  },
  {
    "id": 14043,
    "type": "NormalExercise",
    "assignment": "<p>In Python, a variable allows you to refer to a value with a name. To create a variable use <code>=</code>, like this example:</p>\n<pre><code>x = 5\n</code></pre>\n<p>You can now use the name of this variable, <code>x</code>, instead of the actual value, <code>5</code>.</p>\n<p>Remember, <code>=</code> in Python means <em>assignment</em>, it doesn't test equality!</p>",
    "title": "Variable Assignment",
    "sample_code": "# Create a variable savings\n\n\n# Print out savings\n",
    "instructions": "<ul>\n<li>Create a variable <code>savings</code> with the value 100.</li>\n<li>Check out this variable by typing <code>print(savings)</code> in the script.</li>\n</ul>",
    "number": 7,
    "sct": "Ex().check_object(\"savings\").has_equal_value(incorrect_msg=\"Assign `100` to the variable `savings`.\")\nEx().has_printout(0, not_printed_msg = \"Print out `savings`, the variable you created, with `print(savings)`.\")\nsuccess_msg(\"Great! Let's try to do some calculations with this variable now!\")",
    "pre_exercise_code": "",
    "solution": "# Create a variable savings\nsavings = 100\n\n# Print out savings\nprint(savings)",
    "hint": "<ul>\n<li>Type <code>savings = 100</code> to create the variable <code>savings</code>.</li>\n<li>After creating the variable <code>savings</code>, you can type <code>print(savings)</code>.</li>\n</ul>",
    "attachments": null,
    "xp": 100,
    "possible_answers": [],
    "feedbacks": [],
    "question": ""
  },
  {
    "id": 13726,
    "type": "NormalExercise",
    "assignment": "<p>Remember how you calculated the money you ended up with after 7 years of investing $100? You did something like this:</p>\n<pre><code>100 * 1.1 ** 7\n</code></pre>\n<p>Instead of calculating with the actual values, you can use variables instead. The <code>savings</code> variable you've created in the previous exercise represents the $100 you started with. It's up to you to create a new variable to represent <code>1.1</code> and then redo the calculations!</p>",
    "title": "Calculations with variables",
    "sample_code": "# Create a variable savings\nsavings = 100\n\n# Create a variable growth_multiplier\n\n\n# Calculate result\n\n\n# Print out result\n",
    "instructions": "<ul>\n<li>Create a variable <code>growth_multiplier</code>, equal to <code>1.1</code>.</li>\n<li>Create a variable, <code>result</code>, equal to the amount of money you saved after <code>7</code> years. </li>\n<li>Print out the value of <code>result</code>.</li>\n</ul>",
    "number": 8,
    "sct": "Ex().check_object(\"savings\", missing_msg=\"The variable `savings` was defined for you, don't remove it!\").has_equal_value(incorrect_msg=\"The variable `savings` should be `100`, like it was defined for you.\"),\nEx().check_object(\"growth_multiplier\").has_equal_value(incorrect_msg=\"Did you assign the correct value to `growth_multiplier`?\")\nEx().check_correct(\n  check_object(\"result\").has_equal_value(incorrect_msg=\"Have you used `*` and `**` to calculate `result`?\"),\n  multi(\n    has_code(\"savings\\s*\\*\\s*\\(*\\s*growth_multiplier\", not_typed_msg = \"Did you multiply `savings` by `growth_multiplier ** 7`?\"),      \n    has_code(\"growth_multiplier\\s*\\*\\*\\s*7\", not_typed_msg = \"Did you raise `growth_multiplier` to the power of `7` using `**`?\")   \n  )\n)\n\nEx().has_printout(0, not_printed_msg=\"Remember to print out `result` at the end of your script.\")\nsuccess_msg(\"Great!\")",
    "pre_exercise_code": "",
    "solution": "# Create a variable savings\nsavings = 100\n\n# Create a variable growth_multiplier\ngrowth_multiplier = 1.1\n\n# Calculate result\nresult = savings * growth_multiplier ** 7\n\n# Print out result\nprint(result)",
    "hint": "<ul>\n<li>To create the variable <code>growth_multiplier</code>, use <code>growth_multiplier = 1.1</code>.</li>\n<li>In the example code block of the assignment, replace <code>100</code> with <code>savings</code> and <code>1.1</code> with <code>growth_multiplier</code>: <code>savings * growth_multiplier ** 7</code>.</li>\n<li>Use the <a href=\"https://docs.python.org/3/library/functions.html#print\"><code>print()</code></a> function to print the value of a variable.</li>\n</ul>",
    "attachments": null,
    "xp": 100,
    "possible_answers": [],
    "feedbacks": [],
    "question": ""
  },
  {
    "id": 14044,
    "type": "NormalExercise",
    "assignment": "<p>In the previous exercise, you worked with two Python data types:</p>\n<ul>\n<li><code>int</code>, or integer: a number without a fractional part. <code>savings</code>, with the value <code>100</code>, is an example of an integer.</li>\n<li><code>float</code>, or floating point: a number that has both an integer and fractional part, separated by a point. <code>growth_multiplier</code>, with the value <code>1.1</code>, is an example of a float.</li>\n</ul>\n<p>Next to numerical data types, there are two other very common data types:</p>\n<ul>\n<li><code>str</code>, or string: a type to represent text. You can use single or double quotes to build a string.</li>\n<li><code>bool</code>, or boolean: a type to represent logical values. Can only be <code>True</code> or <code>False</code> (the capitalization is important!).</li>\n</ul>",
    "title": "Other variable types",
    "sample_code": "# Create a variable desc\n\n\n# Create a variable profitable\n",
    "instructions": "<ul>\n<li>Create a new string, <code>desc</code>, with the value <code>\"compound interest\"</code>.</li>\n<li>Create a new boolean, <code>profitable</code>, with the value <code>True</code>.</li>\n</ul>",
    "number": 9,
    "sct": "Ex().check_object(\"desc\").has_equal_value()\nEx().check_object(\"profitable\").has_equal_value()\nsuccess_msg(\"Nice!\")",
    "pre_exercise_code": "",
    "solution": "# Create a variable desc\ndesc = \"compound interest\"\n\n# Create a variable profitable\nprofitable = True",
    "hint": "<ul>\n<li>To create a variable in Python, use <code>=</code>. Make sure to wrap your string in single or double quotes.</li>\n<li>Only two boolean values exist in Python: <code>True</code> and <code>False</code>. <code>TRUE</code>, <code>true</code>, <code>FALSE</code>, <code>false</code> and other versions will not be accepted.</li>\n</ul>",
    "attachments": null,
    "xp": 100,
    "possible_answers": [],
    "feedbacks": [],
    "question": ""
  },
  {
    "id": 14347,
    "type": "MultipleChoiceExercise",
    "assignment": "<p>To find out the type of a value or a variable that refers to that value, you can use the <a href=\"https://docs.python.org/3/library/functions.html#type\"><code>type()</code></a> function. Suppose you've defined a variable <code>a</code>, but you forgot the type of this variable. To determine the type of <code>a</code>, simply execute:</p>\n<pre><code>type(a)\n</code></pre>\n<p>We already went ahead and created three variables: <code>a</code>, <code>b</code> and <code>c</code>. You can use the IPython shell to discover their type. Which of the following options is correct?</p>",
    "title": "Guess the type",
    "sample_code": "",
    "instructions": null,
    "number": 10,
    "sct": "msg1 = \"The type of `a` is not `int`. Try out `type(a)` and see for yourself.\"\nmsg2 = \"`b` is not a `bool`, it's a `str`! The fact that `True` is wrapped in double quotes makes it a string.\"\nmsg3 = \"Correcto perfecto!\"\nmsg4 = \"None of the variable's types is correct here. Try `type(a)` and see what type this variable is.\"\nEx().has_chosen(3,[msg1, msg2, msg3, msg4])",
    "pre_exercise_code": "a = 100*1.1**7\nb = \"True\"\nc = False",
    "solution": "",
    "hint": "<p>Use <code>type(a)</code>, <code>type(b)</code> and <code>type(c)</code> inside the IPython Shell to find out about the variables' types.</p>",
    "attachments": null,
    "xp": 50,
    "possible_answers": [
      "<code>a</code> is of type <code>int</code>, <code>b</code> is of type <code>str</code>, <code>c</code> is of type <code>bool</code>",
      "<code>a</code> is of type <code>float</code>, <code>b</code> is of type <code>bool</code>, <code>c</code> is of type <code>str</code>",
      "<code>a</code> is of type <code>float</code>, <code>b</code> is of type <code>str</code>, <code>c</code> is of type <code>bool</code>",
      "<code>a</code> is of type <code>int</code>, <code>b</code> is of type <code>bool</code>, <code>c</code> is of type <code>str</code>"
    ],
    "feedbacks": [],
    "question": ""
  },
  {
    "id": 14046,
    "type": "NormalExercise",
    "assignment": "<p>Hugo mentioned that different types behave differently in Python.</p>\n<p>When you sum two strings, for example, you'll get different behavior than when you sum two integers or two booleans.</p>\n<p>In the script some variables with different types have already been created. It's up to you to use them.</p>",
    "title": "Operations with other types",
    "sample_code": "savings = 100\ngrowth_multiplier = 1.1\ndesc = \"compound interest\"\n\n# Assign product of growth_multiplier and savings to year1\n\n\n# Print the type of year1\n\n\n# Assign sum of desc and desc to doubledesc\n\n\n# Print out doubledesc\n",
    "instructions": "<ul>\n<li>Calculate the product of <code>savings</code> and <code>growth_multiplier</code>. Store the result in <code>year1</code>.</li>\n<li>What do you think the resulting type will be? Find out by printing out the type of <code>year1</code>.</li>\n<li>Calculate the sum of <code>desc</code> and <code>desc</code> and store the result in a new variable <code>doubledesc</code>.</li>\n<li>Print out <code>doubledesc</code>. Did you expect this?</li>\n</ul>",
    "number": 11,
    "sct": "# predefined\nmsg = \"You don't have to change or remove the predefined variables.\"\nobjs = [\"savings\", \"growth_multiplier\", \"desc\", \"year1\"]\nEx().multi(\n    check_object('savings', missing_msg=msg).has_equal_value(incorrect_msg=msg),\n    check_object('growth_multiplier', missing_msg=msg).has_equal_value(incorrect_msg=msg),\n    check_object('desc', missing_msg=msg).has_equal_value(incorrect_msg=msg),\n    check_object('year1', missing_msg=msg).has_equal_value(incorrect_msg=msg)\n)\n\n# check year1 and printout\nEx().multi(\n    check_object(\"year1\").has_equal_value(incorrect_msg=\"Multiply `savings` and `growth_multiplier` to create the `year1` variable.\"),\n    has_printout(0, not_printed_msg = \"__JINJA__:Use `{{sol_call}}` to print out the type of `year1`.\")\n)\n\n# check doubledesc and prinout\nEx().multi(\n    check_object(\"doubledesc\").has_equal_value(incorrect_msg  = \"Have you stored the result of `desc + desc` in `doubledesc`?\"),\n    has_printout(1, not_printed_msg = \"Don't forget to print out `doubledesc`.\")\n)\n\nsuccess_msg(\"Nice. Notice how `desc + desc` causes `\\\"compound interest\\\"` and `\\\"compound interest\\\"` to be pasted together.\")",
    "pre_exercise_code": "",
    "solution": "savings = 100\ngrowth_multiplier = 1.1\ndesc = \"compound interest\"\n\n# Assign product of savings and growth_multiplier to year1\nyear1 = savings * growth_multiplier\n\n# Print the type of year1\nprint(type(year1))\n\n# Assign sum of desc and desc to doubledesc\ndoubledesc = desc + desc\n\n# Print out doubledesc\nprint(doubledesc)",
    "hint": "<ul>\n<li>Assign <code>growth_multiplier * savings</code> to a new variable, <code>year1</code>.</li>\n<li>To print the type of a variable <code>x</code>, use <code>print(type(x))</code>.</li>\n<li>Assign <code>desc + desc</code> to a new variable, <code>doubledesc</code>.</li>\n<li>To print a variable <code>x</code>, write <code>print(x)</code> in the script.</li>\n</ul>",
    "attachments": null,
    "xp": 100,
    "possible_answers": [],
    "feedbacks": [],
    "question": ""
  },
  {
    "id": 14047,
    "type": "NormalExercise",
    "assignment": "<p>Using the <code>+</code> operator to paste together two strings can be very useful in building custom messages.</p>\n<p>Suppose, for example, that you've calculated the return of your investment and want to summarize the results in a string. Assuming the integer <code>savings</code> and float <code>result</code> are defined, you can try something like this:</p>\n<pre><code>print(\"I started with $\" + savings + \" and now have $\" + result + \". Awesome!\")\n</code></pre>\n<p>This will not work, though, as you cannot simply sum strings and integers/floats.</p>\n<p>To fix the error, you'll need to explicitly convert the types of your variables. More specifically, you'll need <a href=\"https://docs.python.org/3/library/functions.html#func-str\"><code>str()</code></a>, to convert a value into a string. <code>str(savings)</code>, for example, will convert the integer <code>savings</code> to a string.</p>\n<p>Similar functions such as <a href=\"https://docs.python.org/3/library/functions.html#int\"><code>int()</code></a>, <a href=\"https://docs.python.org/3/library/functions.html#float\"><code>float()</code></a> and <a href=\"https://docs.python.org/3/library/functions.html#bool\"><code>bool()</code></a> will help you convert Python values into any type.</p>",
    "title": "Type conversion",
    "sample_code": "# Definition of savings and result\nsavings = 100\nresult = 100 * 1.10 ** 7\n\n# Fix the printout\nprint(\"I started with $\" + savings + \" and now have $\" + result + \". Awesome!\")\n\n# Definition of pi_string\npi_string = \"3.1415926\"\n\n# Convert pi_string into float: pi_float\n",
    "instructions": "<ul>\n<li>Hit <em>Run Code</em> to run the code. Try to understand the error message.</li>\n<li>Fix the code such that the printout runs without errors; use the function <a href=\"https://docs.python.org/3/library/functions.html#func-str\"><code>str()</code></a> to convert the variables to strings.</li>\n<li>Convert the variable <code>pi_string</code> to a float and store this float as a new variable, <code>pi_float</code>.</li>\n</ul>",
    "number": 12,
    "sct": "\n# ensure predefined values are unmodified\nmsg = \"You don't have to change or remove the predefined variables.\"\nEx().multi(\n    check_object(\"savings\", missing_msg=msg).has_equal_value(incorrect_msg=msg),\n    check_object(\"result\", missing_msg=msg).has_equal_value(incorrect_msg=msg)\n)\n\nEx().check_correct(\n    has_printout(0),\n    multi(\n        check_function(\"str\", 0).check_args(0).has_equal_value(incorrect_msg=\"Inside the `print()` command, make sure to convert `savings` into a string with `str(savings)`.\"),\n        check_function(\"str\", 1).check_args(0).has_equal_value(incorrect_msg=\"Inside the `print()` command, make sure to convert `result` into a string `str(result)`.\")\n    )\n)\n\n# check pi_float\nEx().check_correct(\n    check_object(\"pi_float\").has_equal_value(),\n    multi(\n        check_object(\"pi_string\").has_equal_value(),\n        check_function(\"float\", missing_msg = \"In order to convert `pi_string` to a float, be sure to use the `float()` function.\").has_equal_value(incorrect_msg=\"Use `float(pi_string) to create the variable `pi_float`.\")\n    )\n)\n\nsuccess_msg(\"Great! You have a profit of around $95; that's pretty awesome indeed!\")",
    "pre_exercise_code": "",
    "solution": "# Definition of savings and result\nsavings = 100\nresult = 100 * 1.10 ** 7\n\n# Fix the printout\nprint(\"I started with $\" + str(savings) + \" and now have $\" + str(result) + \". Awesome!\")\n\n# Definition of pi_string\npi_string = \"3.1415926\"\n\n# Convert pi_string into float: pi_float\npi_float = float(pi_string)",
    "hint": "<ul>\n<li>You should use <a href=\"https://docs.python.org/3/library/functions.html#func-str\"><code>str()</code></a> twice!</li>\n<li>Use <a href=\"https://docs.python.org/3/library/functions.html#float\"><code>float()</code></a> on <code>pi_string</code> and store the result in <code>pi_float</code>.</li>\n</ul>",
    "attachments": null,
    "xp": 100,
    "possible_answers": [],
    "feedbacks": [],
    "question": ""
  },
  {
    "id": 14253,
    "type": "MultipleChoiceExercise",
    "assignment": "<p>Now that you know something more about combining different sources of information, have a look at the four Python expressions below.\nWhich one of these will throw an error? You can always copy and paste this code in the IPython Shell to find out!</p>",
    "title": "Can Python handle everything?",
    "sample_code": "",
    "instructions": null,
    "number": 13,
    "sct": "msg1 = \"Incorrect, this command runs perfectly fine.\"\nmsg2 = \"It's perfectly possible to 'multiply strings' in Python...\"\nmsg3 = \"Correct! Because you're not converting `2` to a string with [str()](https://docs.python.org/3/library/functions.html#func-str), this will give an error.\"\nmsg4 = \"`True + False` doesn't error out. Feel free to try it in the console to confirm!\"\nEx().has_chosen(3, [msg1, msg2, msg3, msg4])",
    "pre_exercise_code": "",
    "solution": "",
    "hint": "<p>Copy and paste the different expressions into the IPython Shell and try to figure out which one throws an error.</p>",
    "attachments": null,
    "xp": 50,
    "possible_answers": [
      "<code>\"I can add integers, like \"  + str(5) + \" to strings.\"</code>",
      "<code>\"I said \" + (\"Hey \" * 2) + \"Hey!\"</code>",
      "<code>\"The correct answer to this multiple choice exercise is answer number \" + 2</code>",
      "<code>True + False</code>"
    ],
    "feedbacks": [],
    "question": ""
  }
]